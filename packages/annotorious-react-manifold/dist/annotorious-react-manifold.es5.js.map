{"version":3,"file":"annotorious-react-manifold.es5.js","sources":["../src/AnnotoriousManifold.tsx"],"sourcesContent":["import { ReactNode, createContext, useContext, useEffect, useRef, useState } from 'react';\nimport type { Annotation, Annotator } from '@annotorious/react';\nimport type { StoreChangeEvent } from '@annotorious/react';\nimport { AnnotoriousManifoldInstance, createManifoldInstance } from './AnnotoriousManifoldInstance';\n\ninterface AnnotoriousManifoldContextValue {\n\n  annotators: Map<string, Annotator<any, { id: string }>>;\n\n  annotations: Map<string, Annotation[]>;\n\n  selection: ManifoldSelection;\n\n  connectAnnotator(source: string, anno: Annotator<any, { id: string }>): () => void;\n\n}\n\ninterface ManifoldSelection<T extends Annotation = Annotation> {\n\n  id?: string;\n\n  selected: { annotation: T, editable?: boolean }[],\n\n  pointerEvent?: PointerEvent;\n\n}\n\n// @ts-ignore\nexport const AnnotoriousManifoldContext = createContext<AnnotoriousManifoldContextValue>();\n\nexport const AnnotoriousManifold = (props: { children: ReactNode }) => {\n\n  const [annotators, setAnnotators] = useState<Map<string, Annotator<any, { id: string }>>>(new Map());\n\n  const [annotations, setAnnotations] = useState<Map<string, Annotation[]>>(new Map());\n\n  const [selection, setSelection] = \n    useState<ManifoldSelection>({ selected: [] });\n\n  // To prevent selection state updates when de-selecting other annotators\n  const muteSelectionEvents = useRef<boolean>(false);\n\n  const connectAnnotator = (id: string, anno: Annotator<any, { id: string }>) => {\n    // Add the annotator to the state\n    setAnnotators(m => new Map(m.entries()).set(id, anno))\n\n    const { store } = anno.state;\n    const selectionState = anno.state.selection;\n\n    // Add the annotations to the state\n    setAnnotations(m => new Map(m.entries()).set(id, store.all()));\n\n    const onStoreChange = () =>\n      setAnnotations(m => new Map(m.entries()).set(id, store.all()));\n\n    store.observe(onStoreChange);\n\n    // Track selection\n    let selectionStoreObserver: (event: StoreChangeEvent<Annotation>) => void;\n\n    const unsubscribeSelection = selectionState.subscribe(({ selected, pointerEvent }) => {\n      if (selectionStoreObserver) \n        store.unobserve(selectionStoreObserver);\n\n      const resolved = (selected || [])\n        .map(({ id, editable }) => ({ annotation: store.getAnnotation(id), editable }));\n\n      // Set the new selection\n      if (!muteSelectionEvents.current)\n        setSelection({ id, selected: resolved, pointerEvent });\n\n      // Track the state of the selected annotations in the store\n      selectionStoreObserver = event => {\n        const { updated } = event.changes;\n\n        setSelection(({ id, selected }) => ({\n          id,\n          selected: selected.map(({ annotation, editable }) => {\n            const next = updated.find(u => u.oldValue.id === annotation.id);\n            return next ? { annotation: next.newValue, editable } : { annotation, editable };\n          }),\n          pointerEvent\n        }));\n      }\n\n      store.observe(selectionStoreObserver, { annotations: selected.map(({ id }) => id) });\n    });\n\n    return () => {\n      // Remove annotator\n      setAnnotators(m => new Map(Array.from(m.entries()).filter(([key, _]) => key !== id)));\n\n      // Remove & untrack annotations\n      setAnnotations(m => new Map(Array.from(m.entries()).filter(([key, _]) => key !== id)));\n      store.unobserve(onStoreChange);\n\n      // Un-track selection\n      unsubscribeSelection();\n    }\n  }\n\n  useEffect(() => {\n    if (selection.id) {\n      muteSelectionEvents.current = true;\n\n      Array.from(annotators.entries()).forEach(([source, anno]) => {\n        if (source !== selection.id)\n          anno.setSelected();\n      });\n\n      muteSelectionEvents.current = false;\n    }\n  }, [selection, annotators]);\n\n  return (\n    <AnnotoriousManifoldContext.Provider value={{   \n      annotators, \n      annotations,\n      selection,\n      connectAnnotator \n    }}>\n      {props.children}\n    </AnnotoriousManifoldContext.Provider>\n  )\n\n}\n\nexport const useAnnotoriousManifold = <I extends Annotation = Annotation, E extends { id: string } = Annotation>() => {\n  const { annotators } = useContext(AnnotoriousManifoldContext);\n  return createManifoldInstance(annotators) as AnnotoriousManifoldInstance<I, E>;\n}\n\nexport const useAnnotator = <I extends Annotation = Annotation, E extends { id: string } = Annotation>(id: string) => {\n  const { annotators } = useContext(AnnotoriousManifoldContext);\n  return annotators.get(id) as Annotator<I, E>;\n}\n\nexport const useAnnotations = <T extends Annotation>() => {\n  const { annotations } = useContext(AnnotoriousManifoldContext);\n  return annotations as Map<string, T[]>;\n}\n\nexport const useSelection = <T extends Annotation>() => {\n  const { selection } = useContext(AnnotoriousManifoldContext);\n  return selection as ManifoldSelection<T>;\n}\n"],"names":["AnnotoriousManifoldContext","createContext","AnnotoriousManifold","props","annotators","setAnnotators","useState","annotations","setAnnotations","selection","setSelection","muteSelectionEvents","useRef","connectAnnotator","id","anno","m","store","selectionState","onStoreChange","selectionStoreObserver","unsubscribeSelection","selected","pointerEvent","resolved","editable","event","updated","annotation","next","u","key","_","useEffect","source","jsx","useAnnotoriousManifold","useContext","createManifoldInstance","useAnnotator","useAnnotations","useSelection"],"mappings":"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"}