{"version":3,"file":"init-BdRJrnWw.js","sources":["../../../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../../../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../../../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../../../node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","../../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../../../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/utils/fontStringFromTextStyle.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextMetrics.mjs","../../../node_modules/pixi.js/lib/scene/text/utils/generateTextStyleKey.mjs","../../../node_modules/pixi.js/lib/scene/text/TextStyle.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../../../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontTextParser.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLParser.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLStringParser.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapFont.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/asset/loadBitmapFont.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../../../node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../../../node_modules/pixi.js/lib/app/init.mjs","../../../node_modules/pixi.js/lib/scene/graphics/init.mjs","../../../node_modules/pixi.js/lib/scene/mesh/init.mjs","../../../node_modules/pixi.js/lib/scene/text/init.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../../../node_modules/pixi.js/lib/scene/text-html/init.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../../../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  if (!target.isRenderGroupRoot) {\n    bounds.applyMatrix(target.renderGroup.worldTransform);\n  } else {\n    bounds.applyMatrix(target.renderGroup.localTransform);\n  }\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.isRenderGroupRoot || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(target.renderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(target.renderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.isRenderGroupRoot) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    renderable.addBounds(bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      location: 0,\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n    let resolution = colorTextureSource._resolution;\n    let padding = 0;\n    let antialias = colorTextureSource.antialias;\n    let blendRequired = false;\n    let enabled = false;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias !== \"inherit\") {\n        if (filter.antialias === \"on\") {\n          antialias = true;\n        } else {\n          antialias = false;\n        }\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired = blendRequired || filter.blendRequired;\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    const viewPort = renderer.renderTarget.rootViewPort;\n    bounds.scale(resolution).fitBounds(0, viewPort.width, 0, viewPort.height).scale(1 / resolution).pad(padding).ceil();\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","\"use strict\";\nconst genericFontFamilies = [\n  \"serif\",\n  \"sans-serif\",\n  \"monospace\",\n  \"cursive\",\n  \"fantasy\",\n  \"system-ui\"\n];\nfunction fontStringFromTextStyle(style) {\n  const fontSizeString = typeof style.fontSize === \"number\" ? `${style.fontSize}px` : style.fontSize;\n  let fontFamilies = style.fontFamily;\n  if (!Array.isArray(style.fontFamily)) {\n    fontFamilies = style.fontFamily.split(\",\");\n  }\n  for (let i = fontFamilies.length - 1; i >= 0; i--) {\n    let fontFamily = fontFamilies[i].trim();\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily)) {\n      fontFamily = `\"${fontFamily}\"`;\n    }\n    fontFamilies[i] = fontFamily;\n  }\n  return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n}\n\nexport { fontStringFromTextStyle };\n//# sourceMappingURL=fontStringFromTextStyle.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\n\n\"use strict\";\nconst contextSettings = {\n  // TextMetrics requires getImageData readback for measuring fonts.\n  willReadFrequently: true\n};\nconst _CanvasTextMetrics = class _CanvasTextMetrics {\n  /**\n   * Checking that we can use modern canvas 2D API.\n   *\n   * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n   * @see TextMetrics.experimentalLetterSpacing\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n   * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n   */\n  static get experimentalLetterSpacingSupported() {\n    let result = _CanvasTextMetrics._experimentalLetterSpacingSupported;\n    if (result !== void 0) {\n      const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n      result = _CanvasTextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  /**\n   * @param text - the text that was measured\n   * @param style - the style that was measured\n   * @param width - the measured width of the text\n   * @param height - the measured height of the text\n   * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param lineWidths - an array of the line widths for each line matched to `lines`\n   * @param lineHeight - the measured line height for this style\n   * @param maxLineWidth - the maximum line width for all measured lines\n   * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   * @param text - The text to measure.\n   * @param style - The text style to use for measuring\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @param wordWrap\n   * @returns Measured width and height of the text.\n   */\n  static measureText(text = \" \", style, canvas = _CanvasTextMetrics._canvas, wordWrap = style.wordWrap) {\n    const textKey = `${text}:${style.styleKey}`;\n    if (_CanvasTextMetrics._measurementCache[textKey])\n      return _CanvasTextMetrics._measurementCache[textKey];\n    const font = fontStringFromTextStyle(style);\n    const fontProperties = _CanvasTextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = _CanvasTextMetrics.__context;\n    context.font = font;\n    const outputText = wordWrap ? _CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    const strokeWidth = style._stroke?.width || 0;\n    let width = maxLineWidth + strokeWidth;\n    if (style.dropShadow) {\n      width += style.dropShadow.distance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize + strokeWidth;\n    let height = Math.max(lineHeight, fontProperties.fontSize + strokeWidth * 2) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadow.distance;\n    }\n    const measurements = new _CanvasTextMetrics(\n      text,\n      style,\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight + style.leading,\n      maxLineWidth,\n      fontProperties\n    );\n    return measurements;\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (_CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    let width = context.measureText(text).width;\n    if (width > 0) {\n      if (useExperimentalLetterSpacing) {\n        width -= letterSpacing;\n      } else {\n        width += (_CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n      }\n    }\n    return width;\n  }\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   * @param text - String to apply word wrapping to\n   * @param style - the style to use when wrapping\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @returns New string with new lines applied where required\n   */\n  static _wordWrap(text, style, canvas = _CanvasTextMetrics._canvas) {\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */ Object.create(null);\n    const { letterSpacing, whiteSpace } = style;\n    const collapseSpaces = _CanvasTextMetrics._collapseSpaces(whiteSpace);\n    const collapseNewlines = _CanvasTextMetrics._collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _CanvasTextMetrics._tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_CanvasTextMetrics._isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _CanvasTextMetrics._addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_CanvasTextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _CanvasTextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _CanvasTextMetrics._addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _CanvasTextMetrics._addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _CanvasTextMetrics._addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _CanvasTextMetrics._addLine(line, false);\n    return lines;\n  }\n  /**\n   * Convienience function for logging each line added during the wordWrap method.\n   * @param line    - The line of text to add\n   * @param newLine - Add new line character to end\n   * @returns A formatted line\n   */\n  static _addLine(line, newLine = true) {\n    line = _CanvasTextMetrics._trimRight(line);\n    line = newLine ? `${line}\n` : line;\n    return line;\n  }\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   * @param key            - The key\n   * @param letterSpacing  - The letter spacing\n   * @param cache          - The cache\n   * @param context        - The canvas context\n   * @returns The from cache.\n   */\n  static _getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  /**\n   * Determines whether we should collapse breaking spaces.\n   * @param whiteSpace - The TextStyle property whiteSpace\n   * @returns Should collapse\n   */\n  static _collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  /**\n   * Determines whether we should collapse newLine chars.\n   * @param whiteSpace - The white space\n   * @returns should collapse\n   */\n  static _collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  /**\n   * Trims breaking whitespaces from string.\n   * @param text - The text\n   * @returns Trimmed string\n   */\n  static _trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_CanvasTextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  /**\n   * Determines if char is a newline.\n   * @param char - The character\n   * @returns True if newline, False otherwise.\n   */\n  static _isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * It allows one to determine whether char should be a breaking whitespace\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param char - The character\n   * @param [_nextChar] - The next character\n   * @returns True if whitespace, False otherwise.\n   */\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   * @param text - The text\n   * @returns A tokenized array\n   */\n  static _tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_CanvasTextMetrics.isBreakingSpace(char, nextChar) || _CanvasTextMetrics._isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   * @param _token - The token\n   * @param breakWords - The style attr break words\n   * @returns Whether to break word or not\n   */\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param _char - The character\n   * @param _nextChar - The next character\n   * @param _token - The token/word the characters are from\n   * @param _index - The index in the token of the char\n   * @param _breakWords - The style attr break words\n   * @returns whether to break word or not\n   */\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   * @param token - The token to split\n   * @returns The characters of the token\n   * @see CanvasTextMetrics.graphemeSegmenter\n   */\n  static wordWrapSplit(token) {\n    return _CanvasTextMetrics.graphemeSegmenter(token);\n  }\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   * @param font - String representing the style of the font\n   * @returns Font properties object\n   */\n  static measureFont(font) {\n    if (_CanvasTextMetrics._fonts[font]) {\n      return _CanvasTextMetrics._fonts[font];\n    }\n    const context = _CanvasTextMetrics._context;\n    context.font = font;\n    const metrics = context.measureText(_CanvasTextMetrics.METRICS_STRING + _CanvasTextMetrics.BASELINE_SYMBOL);\n    const properties = {\n      ascent: metrics.actualBoundingBoxAscent,\n      descent: metrics.actualBoundingBoxDescent,\n      fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n    };\n    _CanvasTextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  /**\n   * Clear font metrics in metrics cache.\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n  static clearMetrics(font = \"\") {\n    if (font) {\n      delete _CanvasTextMetrics._fonts[font];\n    } else {\n      _CanvasTextMetrics._fonts = {};\n    }\n  }\n  /**\n   * Cached canvas element for measuring text\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _canvas() {\n    if (!_CanvasTextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context?.measureText) {\n          _CanvasTextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = DOMAdapter.get().createCanvas();\n      } catch (ex) {\n        canvas = DOMAdapter.get().createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _CanvasTextMetrics.__canvas = canvas;\n    }\n    return _CanvasTextMetrics.__canvas;\n  }\n  /**\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _context() {\n    if (!_CanvasTextMetrics.__context) {\n      _CanvasTextMetrics.__context = _CanvasTextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _CanvasTextMetrics.__context;\n  }\n};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n */\n_CanvasTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\n/** Baseline symbol for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_SYMBOL = \"M\";\n/** Baseline multiplier for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/** Height multiplier for setting height of canvas to calculate font metrics. */\n_CanvasTextMetrics.HEIGHT_MULTIPLIER = 2;\n/**\n * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n */\n_CanvasTextMetrics.graphemeSegmenter = (() => {\n  if (typeof Intl?.Segmenter === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return (s) => [...segmenter.segment(s)].map((x) => x.segment);\n  }\n  return (s) => [...s];\n})();\n/**\n * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n * lead to more accurate letter-spacing results because it does not try to manually draw\n * each character. However, this Chrome API is experimental and may not serve all cases yet.\n * @see TextMetrics.experimentalLetterSpacingSupported\n */\n_CanvasTextMetrics.experimentalLetterSpacing = false;\n/** Cache of {@see TextMetrics.FontMetrics} objects. */\n_CanvasTextMetrics._fonts = {};\n/** Cache of new line chars. */\n_CanvasTextMetrics._newlines = [\n  10,\n  // line feed\n  13\n  // carriage return\n];\n/** Cache of breaking spaces. */\n_CanvasTextMetrics._breakingSpaces = [\n  9,\n  // character tabulation\n  32,\n  // space\n  8192,\n  // en quad\n  8193,\n  // em quad\n  8194,\n  // en space\n  8195,\n  // em space\n  8196,\n  // three-per-em space\n  8197,\n  // four-per-em space\n  8198,\n  // six-per-em space\n  8200,\n  // punctuation space\n  8201,\n  // thin space\n  8202,\n  // hair space\n  8287,\n  // medium mathematical space\n  12288\n  // ideographic space\n];\n_CanvasTextMetrics._measurementCache = {};\nlet CanvasTextMetrics = _CanvasTextMetrics;\n\nexport { CanvasTextMetrics };\n//# sourceMappingURL=CanvasTextMetrics.mjs.map\n","\"use strict\";\nconst valuesToIterateForKeys = [\n  \"_fontFamily\",\n  \"_fontStyle\",\n  \"_fontSize\",\n  \"_fontVariant\",\n  \"_fontWeight\",\n  \"_breakWords\",\n  \"_align\",\n  \"_leading\",\n  \"_letterSpacing\",\n  \"_lineHeight\",\n  \"_textBaseline\",\n  \"_whiteSpace\",\n  \"_wordWrap\",\n  \"_wordWrapWidth\",\n  \"_padding\",\n  \"_cssOverrides\",\n  \"_trim\"\n];\nfunction generateTextStyleKey(style) {\n  const key = [];\n  let index = 0;\n  for (let i = 0; i < valuesToIterateForKeys.length; i++) {\n    const prop = valuesToIterateForKeys[i];\n    key[index++] = style[prop];\n  }\n  index = addFillStyleKey(style._fill, key, index);\n  index = addStokeStyleKey(style._stroke, key, index);\n  return key.join(\"-\");\n}\nfunction addFillStyleKey(fillStyle, key, index) {\n  if (!fillStyle)\n    return index;\n  key[index++] = fillStyle.color;\n  key[index++] = fillStyle.alpha;\n  key[index++] = fillStyle.fill?.uid;\n  return index;\n}\nfunction addStokeStyleKey(strokeStyle, key, index) {\n  if (!strokeStyle)\n    return index;\n  index = addFillStyleKey(strokeStyle, key, index);\n  key[index++] = strokeStyle.width;\n  key[index++] = strokeStyle.alignment;\n  key[index++] = strokeStyle.cap;\n  key[index++] = strokeStyle.join;\n  key[index++] = strokeStyle.miterLimit;\n  return index;\n}\n\nexport { generateTextStyleKey };\n//# sourceMappingURL=generateTextStyleKey.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient.mjs';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext.mjs';\nimport { convertFillInputToFillStyle } from '../graphics/shared/utils/convertFillInputToFillStyle.mjs';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey.mjs';\n\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor(style = {}) {\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = { ..._TextStyle.defaultTextStyle, ...style };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = {\n        ..._TextStyle.defaultDropShadow,\n        ...value\n      };\n    } else {\n      this._dropShadow = value ? {\n        ..._TextStyle.defaultDropShadow\n      } : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value;\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill)\n      return;\n    this._originalFill = value;\n    this._fill = convertFillInputToFillStyle(\n      value === 0 ? \"black\" : value,\n      GraphicsContext.defaultFillStyle\n    );\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke)\n      return;\n    this._originalStroke = value;\n    this._stroke = convertFillInputToFillStyle(value, GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth\n    });\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n   */\n  destroy(options = false) {\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n};\n/** The default drop shadow settings */\n_TextStyle.defaultDropShadow = {\n  /** Set alpha for the drop shadow */\n  alpha: 1,\n  /** Set a angle of the drop shadow */\n  angle: Math.PI / 6,\n  /** Set a shadow blur radius */\n  blur: 0,\n  /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n  color: \"black\",\n  /** Set a distance of the drop shadow */\n  distance: 5\n};\n/** The default text style settings */\n_TextStyle.defaultTextStyle = {\n  /**\n   * See {@link TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link TextStyle.breakWords} */\n  breakWords: false,\n  /** See {@link TextStyle.dropShadow} */\n  dropShadow: null,\n  /**\n   * See {@link TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link TextStyle.fontSize}\n   * @type {number|string}\n   */\n  fontSize: 26,\n  /**\n   * See {@link TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link TextStyle.leading} */\n  leading: 0,\n  /** See {@link TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link TextStyle.lineHeight} */\n  lineHeight: 0,\n  /** See {@link TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: null,\n  /**\n   * See {@link TextStyle.textBaseline}\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link TextStyle.trim} */\n  trim: false,\n  /**\n   * See {@link TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link TextStyle.wordWrap} */\n  wordWrap: false,\n  /** See {@link TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation(v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    style.stroke = {\n      color,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fill)) {\n    deprecation(v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    const gradientFill = new FillGradient(0, 0, 0, style.fontSize * 1.7);\n    const fills = oldStyle.fill.map((color) => Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = oldStyle.fillGradientStops[index] ?? index / fills.length;\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\n\nexport { TextStyle };\n//# sourceMappingURL=TextStyle.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nfunction getCanvasFillStyle(fillStyle, context) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).toHex();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    if (fillGradient.type === \"linear\") {\n      const gradient = context.createLinearGradient(\n        fillGradient.x0,\n        fillGradient.y0,\n        fillGradient.x1,\n        fillGradient.y1\n      );\n      fillGradient.gradientStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n      return gradient;\n    }\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n//# sourceMappingURL=getCanvasFillStyle.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n//# sourceMappingURL=AbstractBitmapFont.mjs.map\n","\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n//# sourceMappingURL=resolveCharacters.mjs.map\n","import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nclass DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 4;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = options;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    const widthScale = style.fontStyle === \"italic\" ? 2 : 1;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = widthScale * metrics.width * fontScale;\n      const height = metrics.height * fontScale;\n      const paddedWidth = width + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > 512) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > 512) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(512, 512, textureResolution);\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\"\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n}\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n","\"use strict\";\nfunction getBitmapTextLayout(chars, style, font) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    let lastChar = currentLine.chars[index];\n    while (lastChar === \" \") {\n      currentLine.width -= font.chars[lastChar].xAdvance;\n      lastChar = currentLine.chars[--index];\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill) {\n      fontFamilyKey += style._fill.fill.uid;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fnt.once(\"destroy\", () => Cache.remove(fontFamilyKey));\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   */\n  getLayout(text, style) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout(text.split(\"\"), style, bitmapFont);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   */\n  measureText(text, style) {\n    return this.getLayout(text, style);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      Cache.remove(cacheKey);\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HtmlTextStyle.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics.mjs';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n  return {\n    width: contentBounds.width,\n    height: contentBounds.height + descenderPadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics._didGraphicsUpdate) {\n      graphics._didGraphicsUpdate = false;\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch.batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    graphics.on(\"destroyed\", () => {\n      this.destroyRenderable(graphics);\n    });\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.mesh.groupBlendMode;\n  }\n  reset() {\n    this.mesh = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometry.indices;\n    for (let i = 0; i < indices.length; i++) {\n      indexBuffer[index++] = indices[i] + indicesOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const mesh = this.mesh;\n    const geometry = this.geometry;\n    const wt = mesh.groupTransform;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const positions = geometry.positions;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    const abgr = mesh.groupColorAlpha;\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      float32View[index] = a * x + c * y + tx;\n      float32View[index + 1] = b * x + d * y + ty;\n      float32View[index + 2] = transformedUvs[i];\n      float32View[index + 3] = transformedUvs[i + 1];\n      uint32View[index + 4] = abgr;\n      uint32View[index + 5] = textureIdAndRound;\n      index += 6;\n    }\n  }\n  get vertexSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      const texture = mesh.texture;\n      if (batchableMesh.texture._source !== texture._source) {\n        if (batchableMesh.texture._source !== texture._source) {\n          return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n        }\n      }\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add({\n        renderPipeId: \"mesh\",\n        mesh\n      });\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n  }\n  execute({ mesh }) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = mesh.groupBlendMode;\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", () => {\n      this.destroyRenderable(mesh);\n    });\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.mesh = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    gpuMesh.mesh = mesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = new BatchableMesh();\n    batchableMesh.geometry = new NineSliceGeometry();\n    batchableMesh.mesh = sprite;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.mesh = tilingSprite;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: State.default2d\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh.batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", () => {\n      this.destroyRenderable(tilingSprite);\n    });\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst bitmapFontTextParser = {\n  test(data) {\n    return typeof data === \"string\" && data.startsWith(\"info face=\");\n  },\n  parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm);\n    const rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0];\n      const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      const itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\");\n        const key = split[0];\n        const strValue = split[1].replace(/\"/gm, \"\");\n        const floatValue = parseFloat(strValue);\n        const value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const [info] = rawData.info;\n    const [common] = rawData.common;\n    const [distanceField] = rawData.distanceField ?? [];\n    if (distanceField) {\n      font.distanceField = {\n        range: parseInt(distanceField.distanceRange, 10),\n        type: distanceField.fieldType\n      };\n    }\n    font.fontSize = parseInt(info.size, 10);\n    font.fontFamily = info.face;\n    font.lineHeight = parseInt(common.lineHeight, 10);\n    const page = rawData.page;\n    for (let i = 0; i < page.length; i++) {\n      font.pages.push({\n        id: parseInt(page[i].id, 10) || 0,\n        file: page[i].file\n      });\n    }\n    const map = {};\n    font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n    const char = rawData.char;\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.id, 10);\n      let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      font.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.page, 10) || 0,\n        x: parseInt(charNode.x, 10),\n        y: parseInt(charNode.y, 10),\n        width: parseInt(charNode.width, 10),\n        height: parseInt(charNode.height, 10),\n        xOffset: parseInt(charNode.xoffset, 10),\n        yOffset: parseInt(charNode.yoffset, 10),\n        xAdvance: parseInt(charNode.xadvance, 10),\n        kerning: {}\n      };\n    }\n    const kerning = rawData.kerning || [];\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].first, 10);\n      const second = parseInt(kerning[i].second, 10);\n      const amount = parseInt(kerning[i].amount, 10);\n      font.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return font;\n  }\n};\n\nexport { bitmapFontTextParser };\n//# sourceMappingURL=bitmapFontTextParser.mjs.map\n","\"use strict\";\nconst bitmapFontXMLParser = {\n  test(data) {\n    const xml = data;\n    return typeof xml !== \"string\" && \"getElementsByTagName\" in xml && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  },\n  parse(xml) {\n    const data = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const info = xml.getElementsByTagName(\"info\")[0];\n    const common = xml.getElementsByTagName(\"common\")[0];\n    const distanceField = xml.getElementsByTagName(\"distanceField\")[0];\n    if (distanceField) {\n      data.distanceField = {\n        type: distanceField.getAttribute(\"fieldType\"),\n        range: parseInt(distanceField.getAttribute(\"distanceRange\"), 10)\n      };\n    }\n    const page = xml.getElementsByTagName(\"page\");\n    const char = xml.getElementsByTagName(\"char\");\n    const kerning = xml.getElementsByTagName(\"kerning\");\n    data.fontSize = parseInt(info.getAttribute(\"size\"), 10);\n    data.fontFamily = info.getAttribute(\"face\");\n    data.lineHeight = parseInt(common.getAttribute(\"lineHeight\"), 10);\n    for (let i = 0; i < page.length; i++) {\n      data.pages.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    }\n    const map = {};\n    data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute(\"base\"), 10);\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.getAttribute(\"id\"), 10);\n      let letter = charNode.getAttribute(\"letter\") ?? charNode.getAttribute(\"char\") ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      data.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(charNode.getAttribute(\"x\"), 10),\n        y: parseInt(charNode.getAttribute(\"y\"), 10),\n        width: parseInt(charNode.getAttribute(\"width\"), 10),\n        height: parseInt(charNode.getAttribute(\"height\"), 10),\n        // render deets..\n        xOffset: parseInt(charNode.getAttribute(\"xoffset\"), 10),\n        yOffset: parseInt(charNode.getAttribute(\"yoffset\"), 10),\n        // + baseLineOffset,\n        xAdvance: parseInt(charNode.getAttribute(\"xadvance\"), 10),\n        kerning: {}\n      };\n    }\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].getAttribute(\"first\"), 10);\n      const second = parseInt(kerning[i].getAttribute(\"second\"), 10);\n      const amount = parseInt(kerning[i].getAttribute(\"amount\"), 10);\n      data.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return data;\n  }\n};\n\nexport { bitmapFontXMLParser };\n//# sourceMappingURL=bitmapFontXMLParser.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { bitmapFontXMLParser } from './bitmapFontXMLParser.mjs';\n\n\"use strict\";\nconst bitmapFontXMLStringParser = {\n  test(data) {\n    if (typeof data === \"string\" && data.includes(\"<font>\")) {\n      return bitmapFontXMLParser.test(DOMAdapter.get().parseXML(data));\n    }\n    return false;\n  },\n  parse(data) {\n    return bitmapFontXMLParser.parse(DOMAdapter.get().parseXML(data));\n  }\n};\n\nexport { bitmapFontXMLStringParser };\n//# sourceMappingURL=bitmapFontXMLStringParser.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\n\n\"use strict\";\nclass BitmapFont extends AbstractBitmapFont {\n  constructor(options, url) {\n    super();\n    const { textures, data } = options;\n    Object.keys(data.pages).forEach((key) => {\n      const pageData = data.pages[parseInt(key, 10)];\n      const texture = textures[pageData.id];\n      this.pages.push({ texture });\n    });\n    Object.keys(data.chars).forEach((key) => {\n      const charData = data.chars[key];\n      const {\n        frame: textureFrame,\n        source: textureSource\n      } = textures[charData.page];\n      const frameReal = new Rectangle(\n        charData.x + textureFrame.x,\n        charData.y + textureFrame.y,\n        charData.width,\n        charData.height\n      );\n      const texture = new Texture({\n        source: textureSource,\n        frame: frameReal\n      });\n      this.chars[key] = {\n        id: key.codePointAt(0),\n        xOffset: charData.xOffset,\n        yOffset: charData.yOffset,\n        xAdvance: charData.xAdvance,\n        kerning: charData.kerning ?? {},\n        texture\n      };\n    });\n    this.baseRenderedFontSize = data.fontSize;\n    this.baseMeasurementFontSize = data.fontSize;\n    this.fontMetrics = {\n      ascent: 0,\n      descent: 0,\n      fontSize: data.fontSize\n    };\n    this.baseLineOffset = data.baseLineOffset;\n    this.lineHeight = data.lineHeight;\n    this.fontFamily = data.fontFamily;\n    this.distanceField = data.distanceField ?? {\n      type: \"none\",\n      range: 0\n    };\n    this.url = url;\n  }\n  /** Destroys the BitmapFont object. */\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { texture } = this.pages[i];\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n  /**\n   * Generates a bitmap-font for the given style and character set\n   * @param options - Setup options for font generation.\n   * @returns Font generated by style options.\n   * @example\n   * import { BitmapFont, BitmapText } from 'pixi.js';\n   *\n   * BitmapFont.install('TitleFont', {\n   *     fontFamily: 'Arial',\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: 'purple',\n   * });\n   *\n   * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n   */\n  static install(options) {\n    BitmapFontManager.install(options);\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  static uninstall(name) {\n    BitmapFontManager.uninstall(name);\n  }\n}\n\nexport { BitmapFont };\n//# sourceMappingURL=BitmapFont.mjs.map\n","import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser.mjs';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams.mjs';\nimport { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { path } from '../../../utils/path.mjs';\nimport { BitmapFont } from '../BitmapFont.mjs';\nimport { bitmapFontTextParser } from './bitmapFontTextParser.mjs';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser.mjs';\n\n\"use strict\";\nconst validExtensions = [\".xml\", \".fnt\"];\nconst bitmapFontCachePlugin = {\n  extension: ExtensionType.CacheParser,\n  test: (asset) => asset instanceof BitmapFont,\n  getCacheableAssets(keys, asset) {\n    const out = {};\n    keys.forEach((key) => {\n      out[key] = asset;\n    });\n    out[`${asset.fontFamily}-bitmap`] = asset;\n    return out;\n  }\n};\nconst loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  test(url) {\n    return validExtensions.includes(path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n  },\n  async parse(asset, data, loader) {\n    const bitmapFontData = bitmapFontTextParser.test(asset) ? bitmapFontTextParser.parse(asset) : bitmapFontXMLStringParser.parse(asset);\n    const { src } = data;\n    const { pages } = bitmapFontData;\n    const textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = path.join(path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src);\n      textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map((url) => loadedTextures[url]);\n    const bitmapFont = new BitmapFont({\n      data: bitmapFontData,\n      textures\n    }, src);\n    return bitmapFont;\n  },\n  async load(url, _options) {\n    const response = await DOMAdapter.get().fetch(url);\n    return await response.text();\n  },\n  async unload(bitmapFont, _resolvedAsset, loader) {\n    await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n    bitmapFont.destroy();\n  }\n};\n\nexport { bitmapFontCachePlugin, loadBitmapFont };\n//# sourceMappingURL=loadBitmapFont.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vColor * calculateMSDFAlpha(outColor, localUniforms.uDistance);\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vColor * calculateMSDFAlpha(outColor, uDistance);\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { batchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/batchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(MAX_TEXTURES),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    });\n    const glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(MAX_TEXTURES),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: batchSamplersUniformGroup\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        if (!this._sdfShader) {\n          this._sdfShader = new SdfShader();\n        }\n        context.customShader = this._sdfShader;\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = (style._stroke?.width || 0) / 2;\n    currentY += bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    context.translate(\n      -bitmapText._anchor._x * bitmapTextLayout.width - padding,\n      -bitmapText._anchor._y * (bitmapTextLayout.height + bitmapTextLayout.offsetY) - padding\n    ).scale(scale, scale);\n    const tint = style._fill.color;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", () => {\n      this.destroyRenderable(bitmapText);\n    });\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const resolution = bitmapText.resolution ?? this._renderer.resolution;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale) * resolution;\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._sdfShader?.destroy(true);\n    this._sdfShader = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", () => {\n      this.destroyRenderable(htmlText);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  CanvasPool.returnCanvasAndContext(canvasAndContext);\n  return canvasAndContext.canvas;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    image.width = width | 0;\n    image.height = height | 0;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    let resource = image;\n    if (this._createCanvas) {\n      resource = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      const resolution = text.resolution ?? this._renderer.resolution;\n      const { width, height } = this._renderer.canvasText.getTextureSize(\n        text.text,\n        resolution,\n        text._style\n      );\n      if (\n        // is only being used by this text:\n        this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1 && width === gpuText.texture._source.width && height === gpuText.texture._source.height\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, _instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    this._updateText(text);\n    text.on(\"destroyed\", () => {\n      this.destroyRenderable(text);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    const padding = style.padding * 2;\n    context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.globalAlpha = style._fill?.alpha ?? 1;\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { loadBitmapFont, bitmapFontCachePlugin } from './asset/loadBitmapFont.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe, loadBitmapFont, bitmapFontCachePlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","_getGlobalBoundsRecursive","manageEffects","localBounds","boundsPool","viewBounds","children","i","advanced","getGlobalRenderableBounds","renderables","renderable","quadGeometry","Geometry","FilterSystem","UniformGroup","BindGroup","_a","filters","filterData","colorTextureSource","resolution","padding","antialias","blendRequired","enabled","filter","warn","viewPort","TexturePool","inputTexture","backTexture","Texture","previousBounds","renderTarget","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","input","output","clear","offset","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","rootTexture","batchUniforms","RendererType","Bounds","outputMatrix","sprite","data","mappedMatrix","worldTransform","_MeshGeometry","args","deprecation","v8_0_0","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","genericFontFamilies","fontStringFromTextStyle","style","fontSizeString","fontFamilies","fontFamily","contextSettings","_CanvasTextMetrics","result","proto","DOMAdapter","text","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","canvas","wordWrap","textKey","font","context","lineWidth","strokeWidth","letterSpacing","useExperimentalLetterSpacing","line","cache","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","token","currIsBreakingSpace","lastIsBreakingSpace","tokenWidth","characters","j","char","lastChar","k","nextChar","characterWidth","isLastToken","newLine","key","_nextChar","_token","breakWords","_char","_index","_breakWords","metrics","properties","c","segmenter","s","CanvasTextMetrics","valuesToIterateForKeys","generateTextStyleKey","index","prop","addFillStyleKey","addStokeStyleKey","fillStyle","strokeStyle","_TextStyle","EventEmitter","convertV7Tov8Style","fullStyle","thisKey","convertFillInputToFillStyle","GraphicsContext","defaultStyle","destroyTextureSource","_b","_c","_d","TextStyle","oldStyle","defaults","color","gradientFill","FillGradient","fills","Color","number","ratio","getCanvasFillStyle","FillPattern","fillPattern","pattern","fillGradient","gradient","stop","AbstractBitmapFont","destroyTextures","page","resolveCharacters","chars","item","startCode","endCode","i2","j2","DynamicBitmapFont","dynamicOptions","requestedFontSize","charList","self","pageData","textureSource","currentX","currentY","fontScale","widthScale","maxCharHeight","skipTexture","paddedWidth","paddedHeight","pageData2","xAdvance","px","py","frame","Rectangle","newChars","measureCache","first","second","c1","c2","total","amount","textureResolution","canvasAndContext","CanvasPool","texture","ImageSource","stroke","strokeThickness","shadowOptions","rgb","dropShadowBlur","dropShadowDistance","tx","ty","descent","getBitmapTextLayout","layoutData","currentLine","previousChar","firstWord","currentWord","nextWord","word","start","position","nextLine","scale","adjustedLetterSpacing","adjustedWordWrapWidth","isEnd","charData","spaceWidth","kerning","nextCharWidth","alignCenter","alignRight","alignJustify","measurementData","indy","spaceIndex","totalSpaces","BitmapFontManagerClass","fontFamilyKey","overrideFill","Cache","fnt","dynamicFont","bitmapFont","name","textStyle","flatChars","cacheKey","BitmapFontManager","textStyleToCSS","fill","cssStyles","strokeToCSS","dropShadowToCSS","tagStyleToCSS","dropShadowStyle","templates","transform","tagStyles","out","tagStyle","cssTagStyle","HTMLTextStyle","toAdd","v","toRemove","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","tempHTMLTextRenderData","measureHtmlText","fontStyleCSS","htmlTextRenderData","contentBounds","descenderPadding","GraphicsPipe","adaptor","State","graphics","wasBatched","gpuContext","batches","batch","shader","localUniforms","color32BitToUniform","batchPipe","roundPixels","batchClone","BigPool","BatchableGraphics","graphicsUid","_PlaneGeometry","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","indicesOffset","float32View","uint32View","textureId","mesh","geometry","wt","textureIdAndRound","a","b","d","transformedUvs","textureMatrix","abgr","MeshPipe","meshData","isBatched","batchableMesh","batcher","batched","gpuBatchableMesh","gpuMesh","_NineSliceGeometry","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_instructionSet","gpuSprite","batchableSprite","tilingBit","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","size","setUvs","sharedQuad","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","bitmapFontTextParser","txt","items","rawData","attributeList","itemData","split","strValue","floatValue","info","common","distanceField","map","charNode","id","letter","bitmapFontXMLParser","xml","bitmapFontXMLStringParser","BitmapFont","url","textures","textureFrame","frameReal","validExtensions","bitmapFontCachePlugin","asset","keys","loadBitmapFont","LoaderParserPriority","path","loader","bitmapFontData","src","pages","textureUrls","pageFile","imagePath","copySearchParams","loadedTextures","_options","_resolvedAsset","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","colorBit","generateTextureBatchBit","MAX_TEXTURES","colorBitGl","generateTextureBatchBitGl","batchSamplersUniformGroup","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","renderableUid","proxyGraphics","bitmapTextLayout","tint","proxyRenderable","Graphics","dx","dy","worldScale","distance","uid","proxy","HTMLTextPipe","htmlText","gpuText","newKey","htmlTextUid","e","updateQuadBounds","gpuTextData","BatchableSprite","isSafari","userAgent","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","defaultOptions","fontPromises","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","loadSVGImage","delay","resolve2","HTMLTextSystem","promise","measured","svgURL","resource","activeTexture","CanvasTextPipe","textUid","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","left","right","CanvasTextSystem","_renderer","nextPow2","_textKey","trimmed","source","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","dropShadowColor","dropShadowAlpha","linePositionYShift","_e","isStroke","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","extensions","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65]}