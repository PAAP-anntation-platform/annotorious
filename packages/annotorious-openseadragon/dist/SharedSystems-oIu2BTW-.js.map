{"version":3,"file":"SharedSystems-oIu2BTW-.js","sources":["../../../node_modules/pixi.js/lib/filters/Filter.mjs","../../../node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","../../../node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","../../../node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","../../../node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","../../../node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs","../../../node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","../../../node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","../../../node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","../../../node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","../../../node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","../../../node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","../../../node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","../../../node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","../../../node_modules/pixi.js/lib/utils/sayHello.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","../../../node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs"],"sourcesContent":["import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State.for2d();\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { BatchGeometry } from '../gpu/BatchGeometry.mjs';\nimport { Batcher } from './Batcher.mjs';\n\n\"use strict\";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batches = /* @__PURE__ */ Object.create(null);\n    this._geometries = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","\"use strict\";\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.isRenderGroupRoot) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.isRenderGroupRoot) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n//# sourceMappingURL=buildInstructions.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super({\n      filters: [new MaskFilter({\n        sprite: new Sprite(Texture.EMPTY)\n      })]\n    });\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer.renderPipes\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          1,\n          false\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer.renderPipes\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.location ?? (attribute.location = attributeData.location);\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overrideable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: ` \n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface);\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\nexport { collectRenderGroups };\n//# sourceMappingURL=collectRenderGroups.mjs.map\n","\"use strict\";\nfunction mixHexColors(color1, color2, ratio) {\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 + (r2 - r1) * ratio;\n  const g = g1 + (g2 - g1) * ratio;\n  const b = b1 + (b2 - b1) * ratio;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { mixHexColors };\n//# sourceMappingURL=mixHexColors.mjs.map\n","import { mixHexColors } from './mixHexColors.mjs';\n\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\n\nexport { mixColors, mixStandardAnd32BitColors };\n//# sourceMappingURL=mixColors.mjs.map\n","import { Container, UPDATE_COLOR, UPDATE_BLEND, UPDATE_VISIBLE } from '../Container.mjs';\nimport { mixColors } from './mixColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick;\n  renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      updateTransformAndChildren(list[i], updateTick, 0);\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = mixColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.isRenderGroupRoot) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.isRenderGroupRoot) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.renderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = mixColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { collectRenderGroups } from './utils/collectRenderGroups.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderPipes);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    if (!this._filterHash[blendMode]) {\n      this._filterHash[blendMode] = new FilterEffect({\n        filters: [new BLEND_MODE_FILTERS[blendMode]()]\n      });\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect: this._filterHash[blendMode],\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new Texture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\n\n\"use strict\";\nlet saidHello = false;\nconst VERSION = \"8.1.1\";\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { VERSION, sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","import { ExtensionType, extensions } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nextensions.add(TextureGCSystem);\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n"],"names":["_Filter","Shader","options","State","filterManager","input","output","clearMode","value","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","fragment","vertex","source","MaskFilter","sprite","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","Matrix","BatcherPipe","renderer","adaptor","instructionSet","batcher","Batcher","BatchGeometry","batchableObject","activeBatch","geometry","batch","i","ExtensionType","textureBit","textureBitGl","buildInstructions","renderGroup","renderPipes","root","collectAllRenderablesAdvanced","collectAllRenderables","container","rendererPipes","collectAllRenderablesSimple","children","length","isRoot","effect","renderPipeId","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","Sprite","Texture","AlphaMaskPipe","mask","maskedContainer","maskContainer","_maskedContainer","instruction","renderMask","filterEffect","BigPool","bounds","getGlobalBounds","filterTexture","TexturePool","maskData","ColorMaskPipe","_container","colorStack","currentColor","_mask","StencilMaskPipe","_a","instructionsLength","renderTargetUid","maskStackIndex","STENCIL_MODES","CLEAR","ensureAttributes","extractedData","attribute","attributeData","warn","ensureStartAndStride","buffers","attributes","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","GpuStencilModesToPixi","UboSystem","unsafeEvalSupported","uniformGroup","uniformData","Buffer","BufferUsage","uniformGroupSignature","elements","layout","syncFunction","uboElements","data","offset","uniformGroupData","synced","uniformParsers","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","name","parsed","template","fragmentSrc","loopMatrix","col","row","uboSyncFunctionsSTD40","uboSyncFunctionsWGSL","calculateProjection","pm","x","y","width","height","flipY","sign","canvasCache","getCanvasTexture","canvas","texture","CanvasSource","onDestroy","isRenderingToScreen","renderTarget","resource","_RenderTarget","descriptor","uid","TextureSource","colorSource","_size","resolution","skipColorTexture","colorTexture","RenderTarget","RenderTargetSystem","Rectangle","SystemRunner","target","clear","clearColor","frame","renderSurface","didChange","gpuRenderTarget","viewport","pixelWidth","pixelHeight","currentRenderTargetData","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","key","BufferResource","EventEmitter","destroyBuffer","CustomRenderPipe","executeInstructions","instructions","RenderGroupPipe","collectRenderGroups","out","mixHexColors","color1","color2","ratio","r1","g1","b1","r2","g2","b2","r","g","b","WHITE_BGR","mixColors","localBGRColor","parentBGRColor","tempContainer","Container","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","childrenAtDepth","list","index","updateTransformAndChildren","worldAlpha","renderGroupParent","updateFlags","localTransform","parent","updateColorBlendVisibility","UPDATE_COLOR","groupAlpha","UPDATE_BLEND","UPDATE_VISIBLE","validateRenderables","rebuildRequired","tempMatrix","RenderGroupSystem","transform","renderGroups","originalLocalTransform","updateRenderables","SpritePipe","_instructionSet","gpuSprite","batchableSprite","BatchableSprite","_BackgroundSystem","Color","BackgroundSystem","BLEND_MODE_FILTERS","extensions","BlendModePipe","renderable","blendMode","imageTypes","_ExtractSystem","defaults","image","format","quality","resolve","reject","blob","reader","pixelInfo","link","base64","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","antialias","region","getLocalBounds","GlobalUniformSystem","projectionMatrix","worldTransformMatrix","worldColor","currentGlobalUniformData","Point","globalUniformData","uniforms","color32BitToUniform","bindGroup","BindGroup","RendererType","saidHello","VERSION","sayHello","type","DOMAdapter","args","HelloSystem","_TextureGCSystem","managedTextures","TextureGCSystem","_ViewSystem","deprecation","v8_0_0","desiredScreenWidth","desiredScreenHeight","ViewSystem","SharedSystems","SharedRenderPipes"],"mappings":";;AAMA,MAAMA,KAAU,MAAMA,UAAgBC,GAAO;AAAA;AAAA;AAAA;AAAA,EAI3C,YAAYC,GAAS;AACnB,IAAAA,IAAU,EAAE,GAAGF,EAAQ,gBAAgB,GAAGE,EAAO,GACjD,MAAMA,CAAO,GAEb,KAAK,UAAU,IAMf,KAAK,SAASC,EAAM,SACpB,KAAK,UAAUD,EAAQ,SACnB,OAAOA,EAAQ,aAAc,YAC/B,KAAK,YAAYA,EAAQ,YAAY,OAAO,QAE5C,KAAK,YAAYA,EAAQ,WAE3B,KAAK,aAAaA,EAAQ,YAC1B,KAAK,gBAAgBA,EAAQ,eAC7B,KAAK,YAAY,YAAY,GAAG,CAAC;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAME,GAAeC,GAAOC,GAAQC,GAAW;AAC7C,IAAAH,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,YAAY;AACd,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA;AAAA,EAED,IAAI,UAAUC,GAAO;AACnB,SAAK,OAAO,YAAYA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,KAAKN,GAAS;AACnB,UAAM,EAAE,KAAAO,GAAK,IAAAC,GAAI,GAAGC,EAAI,IAAKT;AAC7B,QAAIU,GACAC;AACJ,WAAIJ,MACFG,IAAaE,GAAW,KAAKL,CAAG,IAE9BC,MACFG,IAAYE,GAAU,KAAKL,CAAE,IAExB,IAAIV,EAAQ;AAAA,MACjB,YAAAY;AAAA,MACA,WAAAC;AAAA,MACA,GAAGF;AAAA,IACT,CAAK;AAAA,EACF;AACH;AAKAX,GAAQ,iBAAiB;AAAA,EACvB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,eAAe;AACjB;AACA,IAAIgB,KAAShB;ACrFb,IAAIib,MAAMC,WAAmBJ,GAAO;AAAA,EAC9B,YAAYd,GAAS;AACnB,UAAM,EAAE,QAAAmB,GAAQ,GAAGV,EAAI,IAAKT,GACtBoB,IAAgB,IAAIC,GAAcF,EAAO,OAAO,GAChDG,IAAiB,IAAIC,GAAa;AAAA,MACtC,eAAe,EAAE,OAAO,IAAIC,EAAM,GAAI,MAAM,cAAe;AAAA,MAC3D,YAAY,EAAE,OAAOJ,EAAc,aAAa,MAAM,YAAa;AAAA,MACnE,QAAQ,EAAE,OAAO,GAAG,MAAM,MAAO;AAAA,IACvC,CAAK,GACKV,IAAaE,GAAW,KAAK;AAAA,MACjC,QAAQ;AAAA,QACN,QAAAK;AAAA,QACA,YAAY;AAAA,MACb;AAAA,MACD,UAAU;AAAA,QACR,QAAAA;AAAA,QACA,YAAY;AAAA,MACb;AAAA,IACP,CAAK,GACKN,IAAYE,GAAU,KAAK;AAAA,MAC/B,QAAAG;AAAA,MACA,UAAAD;AAAA,MACA,MAAM;AAAA,IACZ,CAAK;AACD,UAAM;AAAA,MACJ,GAAGN;AAAA,MACH,YAAAC;AAAA,MACA,WAAAC;AAAA,MACA,WAAW;AAAA,QACT,gBAAAW;AAAA,QACA,cAAcH,EAAO,QAAQ;AAAA,MAC9B;AAAA,IACP,CAAK,GACD,KAAK,SAASA,GACd,KAAK,iBAAiBC;AAAA,EACvB;AAAA,EACD,MAAMlB,GAAeC,GAAOC,GAAQC,GAAW;AAC7C,SAAK,eAAe,UAAU,KAAK,OAAO,SAC1CH,EAAc;AAAA,MACZ,KAAK,UAAU,eAAe,SAAS;AAAA,MACvC,KAAK;AAAA,IACN,EAAC,QAAQ,KAAK,eAAe,QAAQ,GACtC,KAAK,UAAU,eAAe,KAAK,OAAO,QAAQ,QAClDA,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,EACzD;AACH;AClDA,MAAMoB,GAAY;AAAA,EAChB,YAAYC,GAAUC,GAAS;AAC7B,SAAK,QAAQ1B,EAAM,SACnB,KAAK,WAA2B,uBAAO,OAAO,IAAI,GAClD,KAAK,cAA8B,uBAAO,OAAO,IAAI,GACrD,KAAK,WAAWyB,GAChB,KAAK,WAAWC,GAChB,KAAK,SAAS,KAAK,IAAI;AAAA,EACxB;AAAA,EACD,WAAWC,GAAgB;AACzB,QAAI,CAAC,KAAK,SAASA,EAAe,GAAG,GAAG;AACtC,YAAMC,IAAU,IAAIC;AACpB,WAAK,SAASF,EAAe,GAAG,IAAIC,GACpC,KAAK,YAAYA,EAAQ,GAAG,IAAI,IAAIE,GAAa;AAAA,IAClD;AACD,SAAK,eAAe,KAAK,SAASH,EAAe,GAAG,GACpD,KAAK,kBAAkB,KAAK,YAAY,KAAK,aAAa,GAAG,GAC7D,KAAK,aAAa;EACnB;AAAA,EACD,WAAWI,GAAiB;AAC1B,SAAK,aAAa,IAAIA,CAAe;AAAA,EACtC;AAAA,EACD,MAAMJ,GAAgB;AACpB,SAAK,aAAa,MAAMA,CAAc;AAAA,EACvC;AAAA,EACD,SAASA,GAAgB;AACvB,UAAMK,IAAc,KAAK,cACnBC,IAAW,KAAK;AACtB,IAAAD,EAAY,OAAOL,CAAc,GACjCM,EAAS,YAAY,gBAAgBD,EAAY,aAAaA,EAAY,WAAW,EAAI,GACzFC,EAAS,QAAQ,CAAC,EAAE,gBAAgBD,EAAY,gBAAgB,aAAaA,EAAY,eAAe,EAAK;AAAA,EAC9G;AAAA,EACD,OAAOL,GAAgB;AACrB,UAAMC,IAAU,KAAK,SAASD,EAAe,GAAG,GAC1CM,IAAW,KAAK,YAAYL,EAAQ,GAAG;AAC7C,IAAIA,EAAQ,UACVA,EAAQ,QAAQ,IAChBK,EAAS,QAAQ,CAAC,EAAE,OAAOL,EAAQ,gBAAgB,CAAC;AAAA,EAEvD;AAAA,EACD,QAAQM,GAAO;AACb,QAAIA,EAAM,WAAW,cAAc;AACjC,YAAMN,IAAUM,EAAM,SAChBD,IAAW,KAAK,YAAYL,EAAQ,GAAG;AAC7C,WAAK,SAAS,MAAM,MAAMK,CAAQ;AAAA,IACnC;AACD,SAAK,SAAS,QAAQ,MAAMC,CAAK;AAAA,EAClC;AAAA,EACD,UAAU;AACR,SAAK,QAAQ,MACb,KAAK,WAAW,MAChB,KAAK,SAAS,WACd,KAAK,WAAW;AAChB,eAAWC,KAAK,KAAK;AACnB,WAAK,SAASA,CAAC,EAAE,QAAO;AAE1B,SAAK,WAAW;AAChB,eAAWA,KAAK,KAAK;AACnB,WAAK,YAAYA,CAAC,EAAE,QAAO;AAE7B,SAAK,cAAc;AAAA,EACpB;AACH;AAEAX,GAAY,YAAY;AAAA,EACtB,MAAM;AAAA,IACJY,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AC5EK,MAACC,KAAa;AAAA,EACjB,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASF;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA,EAIH;AAAA,EACD,UAAU;AAAA,IACR;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOF;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA,EAIH;AACH,GACMC,KAAe;AAAA,EACnB,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA,IAIF;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA,EAIH;AAAA,EACD,UAAU;AAAA,IACR;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMF;AAAA;AAAA,MAEE;AAAA;AAAA;AAAA;AAAA,EAIH;AACH;ACvEA,SAASC,GAAkBC,GAAaC,GAAa;AACnD,QAAMC,IAAOF,EAAY,MACnBb,IAAiBa,EAAY;AACnC,EAAAb,EAAe,MAAK,GACpBc,EAAY,MAAM,WAAWd,CAAc,GAC3Cc,EAAY,UAAU,cACtBA,EAAY,UAAU,cAClBC,EAAK,oBACPA,EAAK,aAAY,GAEnBC,GAA8BD,GAAMf,GAAgBc,GAAa,EAAI,GACrEA,EAAY,MAAM,SAASd,CAAc,GACzCc,EAAY,UAAU,SAASd,CAAc;AAC/C;AACA,SAASiB,EAAsBC,GAAWlB,GAAgBmB,GAAe;AACvE,EAAID,EAAU,sBAAsB,KAAK,CAACA,EAAU,mBAEhDA,EAAU,oBACZA,EAAU,aAAY,GAEpBA,EAAU,WACZE,GAA4BF,GAAWlB,GAAgBmB,CAAa,IAEpEH,GAA8BE,GAAWlB,GAAgBmB,GAAe,EAAK;AAEjF;AACA,SAASC,GAA4BF,GAAWlB,GAAgBc,GAAa;AAO3E,MANII,EAAU,iBACZJ,EAAY,UAAU,aAAaI,GAAWA,EAAU,gBAAgBlB,CAAc,GACtFkB,EAAU,gBAAgB,IACfJ,EACRI,EAAU,YAAY,EAAE,cAAcA,GAAWlB,CAAc,IAEhE,CAACkB,EAAU,mBAAmB;AAChC,UAAMG,IAAWH,EAAU,UACrBI,IAASD,EAAS;AACxB,aAASb,IAAI,GAAGA,IAAIc,GAAQd;AAC1B,MAAAS,EAAsBI,EAASb,CAAC,GAAGR,GAAgBc,CAAW;AAAA,EAEjE;AACH;AACA,SAASE,GAA8BE,GAAWlB,GAAgBc,GAAaS,GAAQ;AACrF,MAAI,CAACA,KAAUL,EAAU;AACvB,IAAAJ,EAAY,YAAY,eAAeI,EAAU,aAAalB,CAAc;AAAA,OACvE;AACL,aAAS,IAAI,GAAG,IAAIkB,EAAU,QAAQ,QAAQ,KAAK;AACjD,YAAMM,IAASN,EAAU,QAAQ,CAAC;AAElC,MADaJ,EAAYU,EAAO,IAAI,EAC/B,KAAKA,GAAQN,GAAWlB,CAAc;AAAA,IAC5C;AACD,UAAMyB,IAAeP,EAAU;AAC/B,IAAIO,MACFX,EAAY,UAAU,aAAaI,GAAWA,EAAU,gBAAgBlB,CAAc,GACtFkB,EAAU,gBAAgB,IACbJ,EAAYW,CAAY,EAChC,cAAcP,GAAWlB,CAAc;AAE9C,UAAMqB,IAAWH,EAAU;AAC3B,QAAIG,EAAS;AACX,eAAS,IAAI,GAAG,IAAIA,EAAS,QAAQ;AACnC,QAAAJ,EAAsBI,EAAS,CAAC,GAAGrB,GAAgBc,CAAW;AAGlE,aAAS,IAAII,EAAU,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACtD,YAAMM,IAASN,EAAU,QAAQ,CAAC;AAElC,MADaJ,EAAYU,EAAO,IAAI,EAC/B,IAAIA,GAAQN,GAAWlB,CAAc;AAAA,IAC3C;AAAA,EACF;AACH;AC1DA,MAAM0B,KAAa,IAAIC;AACvB,MAAMC,WAAwBC,EAAa;AAAA,EACzC,cAAc;AACZ,UAAM;AAAA,MACJ,SAAS,CAAC,IAAIvC,GAAW;AAAA,QACvB,QAAQ,IAAIwC,GAAOC,EAAQ,KAAK;AAAA,MACxC,CAAO,CAAC;AAAA,IACR,CAAK;AAAA,EACF;AAAA,EACD,IAAI,SAAS;AACX,WAAO,KAAK,QAAQ,CAAC,EAAE;AAAA,EACxB;AAAA,EACD,IAAI,OAAOrD,GAAO;AAChB,SAAK,QAAQ,CAAC,EAAE,SAASA;AAAA,EAC1B;AACH;AACA,MAAMsD,GAAc;AAAA,EAClB,YAAYlC,GAAU;AACpB,SAAK,mBAAmB,IACxB,KAAK,YAAYA;AAAA,EAClB;AAAA,EACD,KAAKmC,GAAMC,GAAiBlC,GAAgB;AAC1C,UAAMF,IAAW,KAAK;AAStB,QARAA,EAAS,YAAY,MAAM,MAAME,CAAc,GAC/CA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,MAAAiC;AAAA,MACA,WAAW;AAAA,MACX,iBAAAC;AAAA,IACN,CAAK,GACGD,EAAK,qBAAqB;AAC5B,YAAME,IAAgBF,EAAK;AAC3B,MAAAE,EAAc,iBAAiB,IAC/BlB;AAAA,QACEkB;AAAA,QACAnC;AAAA,QACAF,EAAS;AAAA,MACjB,GACMqC,EAAc,iBAAiB;AAAA,IAChC;AACD,IAAArC,EAAS,YAAY,MAAM,MAAME,CAAc,GAC/CA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,MAAAiC;AAAA,MACA,iBAAAC;AAAA,MACA,WAAW;AAAA,IACjB,CAAK;AAAA,EACF;AAAA,EACD,IAAID,GAAMG,GAAkBpC,GAAgB;AAE1C,IADiB,KAAK,UACb,YAAY,MAAM,MAAMA,CAAc,GAC/CA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,MAAAiC;AAAA,MACA,WAAW;AAAA,IACjB,CAAK;AAAA,EACF;AAAA,EACD,QAAQI,GAAa;AACnB,UAAMvC,IAAW,KAAK,WAChBwC,IAAaD,EAAY,KAAK;AACpC,QAAIA,EAAY,WAAW,iBAAiB;AAC1C,YAAME,IAAeC,EAAQ,IAAIZ,EAAe;AAChD,UAAIU,GAAY;AACd,QAAAD,EAAY,KAAK,KAAK,aAAa;AACnC,cAAMI,IAASC,GAAgBL,EAAY,KAAK,MAAM,IAAMX,EAAU;AACtE,QAAAW,EAAY,KAAK,KAAK,aAAa,IACnCI,EAAO,KAAI;AACX,cAAME,IAAgBC,EAAY;AAAA,UAChCH,EAAO;AAAA,UACPA,EAAO;AAAA,UACP;AAAA,UACA;AAAA,QACV;AACQ,QAAA3C,EAAS,aAAa,KAAK6C,GAAe,EAAI,GAC9C7C,EAAS,eAAe,KAAK;AAAA,UAC3B,QAAQ2C;AAAA,UACR,YAAY;AAAA,QACtB,CAAS;AACD,cAAMlD,IAASgD,EAAa;AAC5B,QAAAhD,EAAO,UAAUoD,GACjBpD,EAAO,eAAe,KAAKkD,EAAO,MAClClD,EAAO,eAAe,KAAKkD,EAAO,MAClC,KAAK,iBAAiB,KAAK;AAAA,UACzB,cAAAF;AAAA,UACA,iBAAiBF,EAAY;AAAA,UAC7B,eAAAM;AAAA,QACV,CAAS;AAAA,MACT;AACQ,QAAAJ,EAAa,SAASF,EAAY,KAAK,MACvC,KAAK,iBAAiB,KAAK;AAAA,UACzB,cAAAE;AAAA,UACA,iBAAiBF,EAAY;AAAA,QACvC,CAAS;AAAA,IAET,WAAeA,EAAY,WAAW,eAAe;AAC/C,YAAMQ,IAAW,KAAK,iBAAiB,KAAK,iBAAiB,SAAS,CAAC;AACvE,MAAIP,MACFxC,EAAS,aAAa,OACtBA,EAAS,eAAe,QAE1BA,EAAS,OAAO,KAAK;AAAA,QACnB,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,WAAW+C,EAAS;AAAA,QACpB,cAAcA,EAAS;AAAA,QACvB,WAAW;AAAA,MACnB,CAAO;AAAA,IACP,WAAeR,EAAY,WAAW,cAAc;AAC9C,MAAAvC,EAAS,OAAO;AAChB,YAAM+C,IAAW,KAAK,iBAAiB,IAAG;AAC1C,MAAIP,KACFM,EAAY,cAAcC,EAAS,aAAa,GAElDL,EAAQ,OAAOK,EAAS,YAAY;AAAA,IACrC;AAAA,EACF;AAAA,EACD,UAAU;AACR,SAAK,YAAY,MACjB,KAAK,mBAAmB;AAAA,EACzB;AACH;AAEAb,GAAc,YAAY;AAAA,EACxB,MAAM;AAAA,IACJvB,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AC7IA,MAAMqC,GAAc;AAAA,EAClB,YAAYhD,GAAU;AACpB,SAAK,cAAc,IACnB,KAAK,mBAAmB,GACxB,KAAK,gBAAgB,GACrB,KAAK,YAAYA;AAAA,EAClB;AAAA,EACD,aAAa;AACX,SAAK,YAAY,CAAC,IAAI,IACtB,KAAK,mBAAmB,GACxB,KAAK,gBAAgB;AAAA,EACtB;AAAA,EACD,KAAKmC,GAAMc,GAAY/C,GAAgB;AAErC,IADiB,KAAK,UACb,YAAY,MAAM,MAAMA,CAAc;AAC/C,UAAMgD,IAAa,KAAK;AACxB,IAAAA,EAAW,KAAK,gBAAgB,IAAIA,EAAW,KAAK,mBAAmB,CAAC,IAAIf,EAAK;AACjF,UAAMgB,IAAe,KAAK,YAAY,KAAK,gBAAgB;AAC3D,IAAIA,MAAiB,KAAK,kBACxB,KAAK,gBAAgBA,GACrBjD,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,WAAWiD;AAAA,MACX,WAAW;AAAA,IACnB,CAAO,IAEH,KAAK;AAAA,EACN;AAAA,EACD,IAAIC,GAAOH,GAAY/C,GAAgB;AAErC,IADiB,KAAK,UACb,YAAY,MAAM,MAAMA,CAAc;AAC/C,UAAMgD,IAAa,KAAK;AACxB,SAAK;AACL,UAAMC,IAAeD,EAAW,KAAK,mBAAmB,CAAC;AACzD,IAAIC,MAAiB,KAAK,kBACxB,KAAK,gBAAgBA,GACrBjD,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,WAAWiD;AAAA,MACX,WAAW;AAAA,IACnB,CAAO;AAAA,EAEJ;AAAA,EACD,QAAQZ,GAAa;AAEnB,IADiB,KAAK,UACb,UAAU,QAAQA,EAAY,SAAS;AAAA,EACjD;AAAA,EACD,UAAU;AACR,SAAK,cAAc;AAAA,EACpB;AACH;AAEAS,GAAc,YAAY;AAAA,EACxB,MAAM;AAAA,IACJrC,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;ACxDA,MAAM0C,GAAgB;AAAA,EACpB,YAAYrD,GAAU;AAEpB,SAAK,iBAAiB,IACtB,KAAK,YAA4B,oBAAI,WACrC,KAAK,YAAYA;AAAA,EAClB;AAAA,EACD,KAAKmC,GAAMc,GAAY/C,GAAgB;AACrC,QAAIoD;AACJ,UAAM5B,IAASS,GACTnC,IAAW,KAAK;AACtB,IAAAA,EAAS,YAAY,MAAM,MAAME,CAAc,GAC/CF,EAAS,YAAY,UAAU,aAAa0B,EAAO,MAAM,QAAQxB,CAAc,GAC/EA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,MAAAiC;AAAA,MACA,WAAW;AAAA,IACjB,CAAK;AACD,UAAME,IAAgBX,EAAO;AAC7B,IAAAW,EAAc,iBAAiB,IAC1B,KAAK,UAAU,IAAIX,CAAM,KAC5B,KAAK,UAAU,IAAIA,GAAQ;AAAA,MACzB,mBAAmB;AAAA,MACnB,oBAAoB;AAAA,IAC5B,CAAO;AAEH,UAAMqB,IAAW,KAAK,UAAU,IAAIrB,CAAM;AAC1C,IAAAqB,EAAS,oBAAoB7C,EAAe,iBAC5CiB;AAAA,MACEkB;AAAA,MACAnC;AAAA,MACAF,EAAS;AAAA,IACf,GACIqC,EAAc,iBAAiB,IAC/BrC,EAAS,YAAY,MAAM,MAAME,CAAc,GAC/CA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,MAAAiC;AAAA,MACA,WAAW;AAAA,IACjB,CAAK;AACD,UAAMoB,IAAqBrD,EAAe,kBAAkB6C,EAAS,oBAAoB;AACzF,IAAAA,EAAS,qBAAqBQ;AAC9B,UAAMC,IAAkBxD,EAAS,aAAa,aAAa;AAC3D,KAACsD,IAAK,KAAK,gBAAgBE,CAAe,MAAMF,EAAGE,CAAe,IAAI;AAAA,EACvE;AAAA,EACD,IAAIrB,GAAMc,GAAY/C,GAAgB;AACpC,UAAMwB,IAASS,GACTnC,IAAW,KAAK;AACtB,IAAAA,EAAS,YAAY,MAAM,MAAME,CAAc,GAC/CF,EAAS,YAAY,UAAU,aAAa0B,EAAO,MAAM,QAAQxB,CAAc,GAC/EA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,WAAW;AAAA,IACjB,CAAK;AACD,UAAM6C,IAAW,KAAK,UAAU,IAAIZ,CAAI;AACxC,aAASzB,IAAI,GAAGA,IAAIqC,EAAS,oBAAoBrC;AAC/C,MAAAR,EAAe,aAAaA,EAAe,iBAAiB,IAAIA,EAAe,aAAa6C,EAAS,mBAAmB;AAE1H,IAAA7C,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,WAAW;AAAA,IACjB,CAAK;AAAA,EACF;AAAA,EACD,QAAQqC,GAAa;AACnB,QAAIe;AACJ,UAAMtD,IAAW,KAAK,WAChBwD,IAAkBxD,EAAS,aAAa,aAAa;AAC3D,QAAIyD,KAAkBH,IAAK,KAAK,gBAAgBE,CAAe,MAAMF,EAAGE,CAAe,IAAI;AAC3F,IAAIjB,EAAY,WAAW,mBACzBvC,EAAS,aAAa,sBACtBA,EAAS,QAAQ,eAAe0D,EAAc,oBAAoBD,CAAc,GAChFA,KACAzD,EAAS,UAAU,QAAQ,CAAC,KACnBuC,EAAY,WAAW,iBAChCvC,EAAS,QAAQ,eAAe0D,EAAc,aAAaD,CAAc,GACzEzD,EAAS,UAAU,QAAQ,EAAE,KACpBuC,EAAY,WAAW,kBAChCvC,EAAS,UAAU,QAAQ,CAAC,GACxByD,MAAmB,IACrBzD,EAAS,QAAQ,eAAe0D,EAAc,uBAAuBD,CAAc,KAEnFzD,EAAS,aAAa,MAAM,MAAM2D,EAAM,OAAO,GAC/C3D,EAAS,QAAQ,eAAe0D,EAAc,UAAUD,CAAc,IAExEA,OACSlB,EAAY,WAAW,iBAChCvC,EAAS,QAAQ,eAAe0D,EAAc,aAAaD,CAAc,GACzEzD,EAAS,UAAU,QAAQ,EAAE,IAE/B,KAAK,eAAewD,CAAe,IAAIC;AAAA,EACxC;AAAA,EACD,UAAU;AACR,SAAK,YAAY,MACjB,KAAK,iBAAiB,MACtB,KAAK,YAAY;AAAA,EAClB;AACH;AACAJ,GAAgB,YAAY;AAAA,EAC1B,MAAM;AAAA,IACJ1C,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AC9GA,SAASiD,GAAiBpD,GAAUqD,GAAe;AACjD,aAAWnD,KAAKF,EAAS,YAAY;AACnC,UAAMsD,IAAYtD,EAAS,WAAWE,CAAC,GACjCqD,IAAgBF,EAAcnD,CAAC;AACrC,IAAIqD,KACFD,EAAU,aAAaA,EAAU,WAAWC,EAAc,WAC1DD,EAAU,WAAWA,EAAU,SAASC,EAAc,SACtDD,EAAU,WAAWA,EAAU,SAASC,EAAc,SACtDD,EAAU,aAAaA,EAAU,WAAWC,EAAc,aAE1DC,EAAK,aAAatD,CAAC,mGAAmG;AAAA,EAEzH;AACD,EAAAuD,GAAqBzD,CAAQ;AAC/B;AACA,SAASyD,GAAqBzD,GAAU;AACtC,QAAM,EAAE,SAAA0D,GAAS,YAAAC,EAAY,IAAG3D,GAC1B4D,IAAa,CAAA,GACbC,IAAY,CAAA;AAClB,aAAWC,KAAKJ,GAAS;AACvB,UAAMK,IAASL,EAAQI,CAAC;AACxB,IAAAF,EAAWG,EAAO,GAAG,IAAI,GACzBF,EAAUE,EAAO,GAAG,IAAI;AAAA,EACzB;AACD,aAAWD,KAAKH,GAAY;AAC1B,UAAML,IAAYK,EAAWG,CAAC;AAC9B,IAAAF,EAAWN,EAAU,OAAO,GAAG,KAAKU,EAA2BV,EAAU,MAAM,EAAE;AAAA,EAClF;AACD,aAAWQ,KAAKH,GAAY;AAC1B,UAAML,IAAYK,EAAWG,CAAC;AAC9B,IAAAR,EAAU,WAAWA,EAAU,SAASM,EAAWN,EAAU,OAAO,GAAG,IACvEA,EAAU,UAAUA,EAAU,QAAQO,EAAUP,EAAU,OAAO,GAAG,IACpEO,EAAUP,EAAU,OAAO,GAAG,KAAKU,EAA2BV,EAAU,MAAM,EAAE;AAAA,EACjF;AACH;ACnCK,MAACW,IAAwB,CAAG;AACjCA,EAAsBf,EAAc,IAAI,IAAI;AAC5Ce,EAAsBf,EAAc,QAAQ,IAAI;AAAA,EAC9C,kBAAkB;AAAA,EAClB,iBAAiB;AACnB;AACAe,EAAsBf,EAAc,kBAAkB,IAAI;AAAA,EACxD,cAAc;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EACD,aAAa;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AACH;AACAe,EAAsBf,EAAc,qBAAqB,IAAI;AAAA,EAC3D,cAAc;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EACD,aAAa;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AACH;AACAe,EAAsBf,EAAc,WAAW,IAAI;AAAA,EACjD,kBAAkB;AAAA,EAClB,cAAc;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EACD,aAAa;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AACH;AClCA,MAAMgB,GAAU;AAAA,EACd,YAAYzE,GAAS;AAEnB,SAAK,oBAAoC,uBAAO,OAAO,IAAI,GAC3D,KAAK,WAAWA,GAChB,KAAK,aAAY;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,eAAe;AACb,QAAI,CAAC0E,GAAmB;AACtB,YAAM,IAAI,MAAM,0GAA0G;AAAA,EAE7H;AAAA,EACD,mBAAmBC,GAAc;AAC/B,UAAMC,IAAc,KAAK,oBAAoBD,CAAY;AACzD,IAAAA,EAAa,WAAWA,EAAa,SAAS,IAAIE,EAAO;AAAA,MACvD,MAAM,IAAI,aAAaD,EAAY,OAAO,OAAO,CAAC;AAAA,MAClD,OAAOE,EAAY,UAAUA,EAAY;AAAA,IAC1C,CAAA;AAAA,EACF;AAAA,EACD,oBAAoBH,GAAc;AAChC,WAAO,KAAK,kBAAkBA,EAAa,UAAU,KAAK,KAAK,kBAAkBA,CAAY;AAAA,EAC9F;AAAA,EACD,kBAAkBA,GAAc;AAC9B,UAAMI,IAAwBJ,EAAa;AAC3C,QAAIC,IAAc,KAAK,kBAAkBG,CAAqB;AAC9D,QAAI,CAACH,GAAa;AAChB,YAAMI,IAAW,OAAO,KAAKL,EAAa,iBAAiB,EAAE,IAAI,CAAClE,MAAMkE,EAAa,kBAAkBlE,CAAC,CAAC,GACnGwE,IAAS,KAAK,SAAS,kBAAkBD,CAAQ,GACjDE,IAAe,KAAK,iBAAiBD,EAAO,WAAW;AAC7D,MAAAL,IAAc,KAAK,kBAAkBG,CAAqB,IAAI;AAAA,QAC5D,QAAAE;AAAA,QACA,cAAAC;AAAA,MACR;AAAA,IACK;AACD,WAAO,KAAK,kBAAkBH,CAAqB;AAAA,EACpD;AAAA,EACD,iBAAiBI,GAAa;AAC5B,WAAO,KAAK,SAAS,gBAAgBA,CAAW;AAAA,EACjD;AAAA,EACD,iBAAiBR,GAAcS,GAAMC,GAAQ;AAC3C,UAAMC,IAAmB,KAAK,oBAAoBX,CAAY;AAC9D,WAAAA,EAAa,WAAWA,EAAa,SAAS,IAAIE,EAAO;AAAA,MACvD,MAAM,IAAI,aAAaS,EAAiB,OAAO,OAAO,CAAC;AAAA,MACvD,OAAOR,EAAY,UAAUA,EAAY;AAAA,IAC1C,CAAA,IACDM,MAASA,IAAOT,EAAa,OAAO,OACpCU,MAAWA,IAAS,IACpBC,EAAiB,aAAaX,EAAa,UAAUS,GAAMC,CAAM,GAC1D;AAAA,EACR;AAAA,EACD,mBAAmBV,GAAc;AAC/B,QAAIA,EAAa,YAAY,CAACA,EAAa;AACzC,aAAO;AACT,IAAAA,EAAa,WAAW;AACxB,UAAMY,IAAS,KAAK,iBAAiBZ,CAAY;AACjD,WAAAA,EAAa,OAAO,UACbY;AAAA,EACR;AAAA,EACD,UAAU;AACR,SAAK,oBAAoB;AAAA,EAC1B;AACH;ACtEK,MAACC,IAAiB;AAAA;AAAA,EAErB;AAAA,IACE,MAAM;AAAA,IACN,MAAM,CAACJ,MACSA,EAAK,MACN,MAAM;AAAA,IAErB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYL,SAAS;AAAA;AAAA;AAAA,EAGV;AAAA;AAAA,EAED;AAAA,IACE,MAAM;AAAA,IACN,MAAM,CAACA,MAASA,EAAK,SAAS,eAAeA,EAAK,SAAS,KAAKA,EAAK,MAAM,UAAU;AAAA,IACrF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOL,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWV;AAAA;AAAA,EAED;AAAA,IACE,MAAM;AAAA,IACN,MAAM,CAACA,MAASA,EAAK,SAAS,eAAeA,EAAK,SAAS,KAAKA,EAAK,MAAM,MAAM;AAAA,IACjF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV;AAAA;AAAA,EAED;AAAA,IACE,MAAM;AAAA,IACN,MAAM,CAACA,MAASA,EAAK,SAAS,eAAeA,EAAK,SAAS,KAAKA,EAAK,MAAM,QAAQ;AAAA,IACnF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOL,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWV;AAAA;AAAA,EAED;AAAA,IACE,MAAM;AAAA,IACN,MAAM,CAACA,MAASA,EAAK,SAAS,eAAeA,EAAK,SAAS,KAAKA,EAAK,MAAM,QAAQ;AAAA,IACnF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAML,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUV;AACH;AC5GA,SAASK,GAAsBN,GAAaO,GAAYC,GAAyBC,GAAkB;AACjG,QAAMC,IAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOpB;AACH,MAAIC,IAAO;AACX,WAASrF,IAAI,GAAGA,IAAI0E,EAAY,QAAQ1E,KAAK;AAC3C,UAAMsF,IAAaZ,EAAY1E,CAAC,GAC1BuF,IAAOD,EAAW,KAAK;AAC7B,QAAIE,IAAS,IACTZ,IAAS;AACb,aAAShB,IAAI,GAAGA,IAAImB,EAAe,QAAQnB;AAEzC,UADsBmB,EAAenB,CAAC,EACpB,KAAK0B,EAAW,IAAI,GAAG;AACvC,QAAAV,IAASU,EAAW,SAAS,GAC7BF,EAAc;AAAA,UACZ,WAAWG,CAAI;AAAA,UACf,aAAaX,IAASS,CAAI;AAAA,UAC1BN,EAAenB,CAAC,EAAEqB,CAAU,KAAKF,EAAenB,CAAC,EAAE;AAAA,QAC7D,GACQ4B,IAAS;AACT;AAAA,MACD;AAEH,QAAI,CAACA;AACH,UAAIF,EAAW,KAAK,OAAO;AACzB,QAAAV,IAASU,EAAW,SAAS,GAC7BF,EAAc,KAAKF,EAAwBI,GAAYV,IAASS,CAAI,CAAC;AAAA,WAChE;AACL,cAAMI,IAAWN,EAAiBG,EAAW,KAAK,IAAI;AACtD,QAAAV,IAASU,EAAW,SAAS,GAC7BF,EAAc;AAAA;AAAA,UAEZ;AAAA,6BACmBG,CAAI;AAAA,gCACDX,IAASS,CAAI;AAAA,sBACvBI,CAAQ;AAAA;AAAA,QAE9B;AAAA,MACO;AAEH,IAAAJ,IAAOT;AAAA,EACR;AACD,QAAMc,IAAcN,EAAc,KAAK;AAAA,CAAI;AAC3C,SAAO,IAAI;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACAM;AAAA,EACJ;AACA;ACxDA,SAASC,EAAWC,GAAKC,GAAK;AAE5B,SAAO;AAAA,8BADOD,IAAMC,CAEa;AAAA,mCACAD,CAAG,oBAAoBA,CAAG;AAAA;AAAA;AAG7D;AACK,MAACE,KAAwB;AAAA,EAC5B,KAAK;AAAA;AAAA,EAEL,KAAK;AAAA;AAAA,EAEL,aAAa;AAAA;AAAA;AAAA,EAGb,aAAa;AAAA;AAAA;AAAA;AAAA,EAIb,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUf,eAAe;AAAA;AAAA;AAAA;AAAA,EAIf,eAAeH,EAAW,GAAG,CAAC;AAAA,EAC9B,eAAeA,EAAW,GAAG,CAAC;AAAA,EAC9B,eAAeA,EAAW,GAAG,CAAC;AAAA,EAC9B,eAAeA,EAAW,GAAG,CAAC;AAAA,EAC9B,eAAeA,EAAW,GAAG,CAAC;AAAA,EAC9B,eAAeA,EAAW,GAAG,CAAC;AAChC,GACMI,KAAuB;AAAA,EAC3B,GAAGD;AAAA,EACH,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAMjB;AC3DA,SAASE,GAAoBC,GAAIC,GAAGC,GAAGC,GAAOC,GAAQC,GAAO;AAC3D,QAAMC,IAAOD,IAAQ,IAAI;AACzB,SAAAL,EAAG,SAAQ,GACXA,EAAG,IAAI,IAAIG,IAAQ,GACnBH,EAAG,IAAIM,KAAQ,IAAIF,IAAS,IAC5BJ,EAAG,KAAK,KAAKC,IAAID,EAAG,GACpBA,EAAG,KAAK,CAACM,IAAOJ,IAAIF,EAAG,GAChBA;AACT;ACLA,MAAMO,IAA8B,oBAAI;AACxC,SAASC,GAAiBC,GAAQ9I,GAAS;AACzC,MAAI,CAAC4I,EAAY,IAAIE,CAAM,GAAG;AAC5B,UAAMC,IAAU,IAAIpF,EAAQ;AAAA,MAC1B,QAAQ,IAAIqF,EAAa;AAAA,QACvB,UAAUF;AAAA,QACV,GAAG9I;AAAA,MACX,CAAO;AAAA,IACP,CAAK,GACKiJ,IAAY,MAAM;AACtB,MAAIL,EAAY,IAAIE,CAAM,MAAMC,KAC9BH,EAAY,OAAOE,CAAM;AAAA,IAEjC;AACI,IAAAC,EAAQ,KAAK,WAAWE,CAAS,GACjCF,EAAQ,OAAO,KAAK,WAAWE,CAAS,GACxCL,EAAY,IAAIE,GAAQC,CAAO;AAAA,EAChC;AACD,SAAOH,EAAY,IAAIE,CAAM;AAC/B;ACtBA,SAASI,GAAoBC,GAAc;AACzC,QAAMC,IAAWD,EAAa,aAAa,OAAO;AAClD,SAAO,WAAW,qBAAqBC,aAAoB,qBAAqB,SAAS,KAAK,SAASA,CAAQ;AACjH;ACCA,MAAMC,KAAgB,MAAMA,GAAc;AAAA;AAAA;AAAA;AAAA,EAIxC,YAAYC,IAAa,IAAI;AAgB3B,QAfA,KAAK,MAAMC,EAAI,cAAc,GAK7B,KAAK,gBAAgB,IACrB,KAAK,UAAU,GACf,KAAK,SAAS,IACd,KAAK,QAAQ,IAAI,aAAa,CAAC,GAE/B,KAAK,wBAAwB,IAC7BD,IAAa,EAAE,GAAGD,GAAc,gBAAgB,GAAGC,EAAU,GAC7D,KAAK,UAAUA,EAAW,SAC1B,KAAK,QAAQA,EAAW,OACxB,KAAK,SAASA,EAAW,QACrB,OAAOA,EAAW,iBAAkB,UAAU;AAChD,WAAK,wBAAwB;AAC7B,eAASlH,IAAI,GAAGA,IAAIkH,EAAW,eAAelH;AAC5C,aAAK,cAAc;AAAA,UACjB,IAAIoH,EAAc;AAAA,YAChB,OAAOF,EAAW;AAAA,YAClB,QAAQA,EAAW;AAAA,YACnB,YAAYA,EAAW;AAAA,YACvB,WAAWA,EAAW;AAAA,UAClC,CAAW;AAAA,QACX;AAAA,IAEA,OAAW;AACL,WAAK,gBAAgB,CAAC,GAAGA,EAAW,cAAc,IAAI,CAACP,MAAYA,EAAQ,MAAM,CAAC;AAClF,YAAMU,IAAc,KAAK,aAAa;AACtC,WAAK,OAAOA,EAAY,OAAOA,EAAY,QAAQA,EAAY,WAAW;AAAA,IAC3E;AACD,SAAK,aAAa,OAAO,GAAG,UAAU,KAAK,gBAAgB,IAAI,IAC3DH,EAAW,uBAAuB,KAAK,aACrCA,EAAW,+BAA+B3F,KAAW2F,EAAW,+BAA+BE,IACjG,KAAK,sBAAsBF,EAAW,oBAAoB,SAE1D,KAAK,0BAAyB;AAAA,EAGnC;AAAA,EACD,IAAI,OAAO;AACT,UAAMI,IAAQ,KAAK;AACnB,WAAAA,EAAM,CAAC,IAAI,KAAK,YAChBA,EAAM,CAAC,IAAI,KAAK,aACTA;AAAA,EACR;AAAA,EACD,IAAI,QAAQ;AACV,WAAO,KAAK,aAAa,OAAO;AAAA,EACjC;AAAA,EACD,IAAI,SAAS;AACX,WAAO,KAAK,aAAa,OAAO;AAAA,EACjC;AAAA,EACD,IAAI,aAAa;AACf,WAAO,KAAK,aAAa,OAAO;AAAA,EACjC;AAAA,EACD,IAAI,cAAc;AAChB,WAAO,KAAK,aAAa,OAAO;AAAA,EACjC;AAAA,EACD,IAAI,aAAa;AACf,WAAO,KAAK,aAAa,OAAO;AAAA,EACjC;AAAA,EACD,IAAI,eAAe;AACjB,WAAO,KAAK,cAAc,CAAC;AAAA,EAC5B;AAAA,EACD,eAAezI,GAAQ;AACrB,SAAK,OAAOA,EAAO,OAAOA,EAAO,QAAQA,EAAO,aAAa,EAAI;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,4BAA4B;AAC1B,IAAK,KAAK,wBACR,KAAK,sBAAsB,IAAIuI,EAAc;AAAA,MAC3C,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,YAAY,KAAK;AAAA,MACjB,QAAQ;AAAA,MACR,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,eAAe;AAAA;AAAA,IAEvB,CAAO;AAAA,EAEJ;AAAA,EACD,OAAOhB,GAAOC,GAAQkB,IAAa,KAAK,YAAYC,IAAmB,IAAO;AAC5E,SAAK,WACL,KAAK,cAAc,QAAQ,CAACC,GAAc,MAAM;AAC9C,MAAID,KAAoB,MAAM,KAE9BC,EAAa,OAAO,OAAOrB,GAAOC,GAAQkB,CAAU;AAAA,IAC1D,CAAK,GACG,KAAK,uBACP,KAAK,oBAAoB,OAAO,OAAOnB,GAAOC,GAAQkB,CAAU;AAAA,EAEnE;AAAA,EACD,UAAU;AACR,SAAK,aAAa,OAAO,IAAI,UAAU,KAAK,gBAAgB,IAAI,GAC5D,KAAK,yBACP,KAAK,cAAc,QAAQ,CAACZ,MAAY;AACtC,MAAAA,EAAQ,QAAO;AAAA,IACvB,CAAO,GAEC,KAAK,wBACP,KAAK,oBAAoB,WACzB,OAAO,KAAK;AAAA,EAEf;AACH;AAEAM,GAAc,iBAAiB;AAAA;AAAA,EAE7B,OAAO;AAAA;AAAA,EAEP,QAAQ;AAAA;AAAA,EAER,YAAY;AAAA;AAAA,EAEZ,eAAe;AAAA;AAAA,EAEf,SAAS;AAAA;AAAA,EAET,OAAO;AAAA;AAAA,EAEP,WAAW;AAAA;AAAA;AAAA,EAGX,QAAQ;AACV;AACA,IAAIS,IAAeT;ACjInB,MAAMU,GAAmB;AAAA,EACvB,YAAYrI,GAAU;AAEpB,SAAK,eAAe,IAAIsI,KAExB,KAAK,WAAW,IAAIA,KAKpB,KAAK,uBAAuB,IAAIC,GAAa,sBAAsB,GAEnE,KAAK,mBAAmB,IAAIzI,KAE5B,KAAK,oBAAoB,CAAC,GAAG,GAAG,GAAG,CAAC,GAKpC,KAAK,mCAAmD,oBAAI,OAE5D,KAAK,uBAAuC,uBAAO,OAAO,IAAI,GAM9D,KAAK,qBAAqB,IAC1B,KAAK,YAAYE;AAAA,EAClB;AAAA;AAAA,EAED,mBAAmB;AACjB,SAAK,QAAQ,iBAAiB,KAAK,YAAY;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,YAAY;AAAA,IACV,QAAAwI;AAAA,IACA,OAAAC;AAAA,IACA,YAAAC;AAAA,IACA,OAAAC;AAAA,EACJ,GAAK;AACD,SAAK,mBAAmB,SAAS,GACjC,KAAK;AAAA,MACHH;AAAA,MACAC;AAAA,MACAC;AAAA,MACAC;AAAA,IACN,GACI,KAAK,aAAa,SAAS,KAAK,QAAQ,GACxC,KAAK,mBAAmB,KAAK,cAC7B,KAAK,oBAAoBnB,GAAoB,KAAK,gBAAgB;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,KAAKoB,GAAeH,IAAQ,IAAMC,GAAYC,GAAO;AACnD,UAAMlB,IAAe,KAAK,gBAAgBmB,CAAa,GACjDC,IAAY,KAAK,iBAAiBpB;AACxC,SAAK,eAAeA,GACpB,KAAK,gBAAgBmB;AACrB,UAAME,IAAkB,KAAK,mBAAmBrB,CAAY;AAC5D,KAAIA,EAAa,eAAeqB,EAAgB,SAASrB,EAAa,gBAAgBqB,EAAgB,YACpG,KAAK,QAAQ,sBAAsBrB,CAAY,GAC/CqB,EAAgB,QAAQrB,EAAa,YACrCqB,EAAgB,SAASrB,EAAa;AAExC,UAAMlI,IAASkI,EAAa,cACtBsB,IAAW,KAAK,UAChBC,IAAazJ,EAAO,YACpB0J,IAAc1J,EAAO;AAI3B,QAHI,CAACoJ,KAASC,aAAyB3G,MACrC0G,IAAQC,EAAc,QAEpBD,GAAO;AACT,YAAMV,IAAa1I,EAAO;AAC1B,MAAAwJ,EAAS,IAAIJ,EAAM,IAAIV,IAAa,MAAM,GAC1Cc,EAAS,IAAIJ,EAAM,IAAIV,IAAa,MAAM,GAC1Cc,EAAS,QAAQJ,EAAM,QAAQV,IAAa,MAAM,GAClDc,EAAS,SAASJ,EAAM,SAASV,IAAa,MAAM;AAAA,IAC1D;AACM,MAAAc,EAAS,IAAI,GACbA,EAAS,IAAI,GACbA,EAAS,QAAQC,GACjBD,EAAS,SAASE;AAEpB,WAAAvC;AAAA,MACE,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACAqC,EAAS,QAAQxJ,EAAO;AAAA,MACxBwJ,EAAS,SAASxJ,EAAO;AAAA,MACzB,CAACkI,EAAa;AAAA,IACpB,GACI,KAAK,QAAQ,gBAAgBA,GAAcgB,GAAOC,GAAYK,CAAQ,GAClEF,KACF,KAAK,qBAAqB,KAAKpB,CAAY,GAEtCA;AAAA,EACR;AAAA,EACD,MAAMe,GAAQC,IAAQ9E,EAAM,KAAK+E,GAAY;AAC3C,IAAKD,MAEDD,MACFA,IAAS,KAAK,gBAAgBA,CAAM,IAEtC,KAAK,QAAQ;AAAA,MACXA,KAAU,KAAK;AAAA,MACfC;AAAA,MACAC;AAAA,MACA,KAAK;AAAA,IACX;AAAA,EACG;AAAA,EACD,gBAAgB;AACd,SAAK,uBAAuC,uBAAO,OAAO,IAAI;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,KAAKE,GAAeH,IAAQ9E,EAAM,KAAK+E,GAAYC,GAAO;AACxD,UAAMlB,IAAe,KAAK,KAAKmB,GAAeH,GAAOC,GAAYC,CAAK;AACtE,gBAAK,mBAAmB,KAAK;AAAA,MAC3B,cAAAlB;AAAA,MACA,OAAAkB;AAAA,IACN,CAAK,GACMlB;AAAA,EACR;AAAA;AAAA,EAED,MAAM;AACJ,SAAK,mBAAmB;AACxB,UAAMyB,IAA0B,KAAK,mBAAmB,KAAK,mBAAmB,SAAS,CAAC;AAC1F,SAAK,KAAKA,EAAwB,cAAc,IAAO,MAAMA,EAAwB,KAAK;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,gBAAgBN,GAAe;AAC7B,WAAIA,EAAc,cAChBA,IAAgBA,EAAc,SAEzB,KAAK,iCAAiC,IAAIA,CAAa,KAAK,KAAK,kBAAkBA,CAAa;AAAA,EACxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeD,cAAcO,GAA4BC,GAAoBC,GAAWC,GAAMC,GAAY;AACzF,IAAIF,EAAU,IAAI,MAChBC,EAAK,SAASD,EAAU,GACxBE,EAAW,KAAKF,EAAU,GAC1BA,EAAU,IAAI,IAEZA,EAAU,IAAI,MAChBC,EAAK,UAAUD,EAAU,GACzBE,EAAW,KAAKF,EAAU,GAC1BA,EAAU,IAAI;AAEhB,UAAM,EAAE,YAAAL,GAAY,aAAAC,EAAa,IAAGE;AACpC,WAAAG,EAAK,QAAQ,KAAK,IAAIA,EAAK,OAAON,IAAaK,EAAU,CAAC,GAC1DC,EAAK,SAAS,KAAK,IAAIA,EAAK,QAAQL,IAAcI,EAAU,CAAC,GACtD,KAAK,QAAQ;AAAA,MAClBF;AAAA,MACAC;AAAA,MACAC;AAAA,MACAC;AAAA,MACAC;AAAA,IACN;AAAA,EACG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,qBAAqB;AACnB,IAAK,KAAK,aAAa,YACrB,KAAK,aAAa,UAAU,IAC5B,KAAK,QAAQ,gBAAgB,KAAK,cAAc,IAAO,MAAM,KAAK,QAAQ;AAAA,EAE7E;AAAA;AAAA,EAED,UAAU;AACR,SAAK,YAAY,MACjB,KAAK,iCAAiC,QAAQ,CAAC9B,GAAc+B,MAAQ;AACnE,MAAI/B,MAAiB+B,KACnB/B,EAAa,QAAO;AAAA,IAE5B,CAAK,GACD,KAAK,iCAAiC,SACtC,KAAK,uBAAuC,uBAAO,OAAO,IAAI;AAAA,EAC/D;AAAA,EACD,kBAAkBmB,GAAe;AAC/B,QAAInB,IAAe;AACnB,WAAIH,EAAa,KAAKsB,CAAa,MACjCA,IAAgBzB,GAAiByB,CAAa,IAE5CA,aAAyBR,IAC3BX,IAAemB,IACNA,aAAyBd,MAClCL,IAAe,IAAIW,EAAa;AAAA,MAC9B,eAAe,CAACQ,CAAa;AAAA,IACrC,CAAO,GACGtB,EAAa,KAAKsB,EAAc,OAAO,QAAQ,MACjDnB,EAAa,SAAS,KAExBmB,EAAc,KAAK,WAAW,MAAM;AAClC,MAAAnB,EAAa,QAAO;AACpB,YAAMqB,IAAkB,KAAK,qBAAqBrB,EAAa,GAAG;AAClE,MAAIqB,MACF,KAAK,qBAAqBrB,EAAa,GAAG,IAAI,MAC9C,KAAK,QAAQ,uBAAuBqB,CAAe;AAAA,IAE7D,CAAO,IAEH,KAAK,iCAAiC,IAAIF,GAAenB,CAAY,GAC9DA;AAAA,EACR;AAAA,EACD,mBAAmBA,GAAc;AAC/B,WAAO,KAAK,qBAAqBA,EAAa,GAAG,MAAM,KAAK,qBAAqBA,EAAa,GAAG,IAAI,KAAK,QAAQ,oBAAoBA,CAAY;AAAA,EACnJ;AACH;ACpQA,MAAMgC,WAAuBC,GAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUxC,YAAY,EAAE,QAAAnF,GAAQ,QAAAe,GAAQ,MAAAgE,EAAI,GAAI;AACpC,aAWA,KAAK,MAAMzB,EAAI,QAAQ,GAMvB,KAAK,gBAAgB,kBAMrB,KAAK,WAAW,GAMhB,KAAK,cAAcA,EAAI,UAAU,GAMjC,KAAK,kBAAkB,IAKvB,KAAK,YAAY,IACjB,KAAK,SAAStD,GACd,KAAK,SAASe,IAAS,GACvB,KAAK,OAAOgE,GACZ,KAAK,OAAO,GAAG,UAAU,KAAK,gBAAgB,IAAI;AAAA,EACnD;AAAA,EACD,iBAAiB;AACf,SAAK,cAAczB,EAAI,UAAU,GACjC,KAAK,KAAK,UAAU,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQ8B,IAAgB,IAAO;AAC7B,SAAK,YAAY,IACbA,KACF,KAAK,OAAO,WAEd,KAAK,KAAK,UAAU,IAAI,GACxB,KAAK,SAAS;AAAA,EACf;AACH;AC3EA,MAAMC,GAAiB;AAAA,EACrB,YAAY5J,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA,EACD,cAAcoB,GAAWlB,GAAgB;AACvC,SAAK,UAAU,YAAY,MAAM,MAAMA,CAAc,GACrDA,EAAe,IAAIkB,CAAS;AAAA,EAC7B;AAAA,EACD,QAAQA,GAAW;AACjB,IAAKA,EAAU,gBAEfA,EAAU,OAAO,KAAK,SAAS;AAAA,EAChC;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AACAwI,GAAiB,YAAY;AAAA,EAC3B,MAAM;AAAA,IACJjJ,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AC1BA,SAASkJ,GAAoB9I,GAAaf,GAAU;AAClD,QAAME,IAAiBa,EAAY,gBAC7B+I,IAAe5J,EAAe;AACpC,WAASQ,IAAI,GAAGA,IAAIR,EAAe,iBAAiBQ,KAAK;AACvD,UAAM6B,IAAcuH,EAAapJ,CAAC;AAClC,IAAAV,EAASuC,EAAY,YAAY,EAAE,QAAQA,CAAW;AAAA,EACvD;AACH;ACJA,MAAMwH,GAAgB;AAAA,EACpB,YAAY/J,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA,EACD,eAAee,GAAab,GAAgB;AAC1C,SAAK,UAAU,YAAY,MAAM,MAAMA,CAAc,GACrDA,EAAe,IAAIa,CAAW;AAAA,EAC/B;AAAA,EACD,QAAQA,GAAa;AACnB,IAAKA,EAAY,iBAEjB,KAAK,UAAU,eAAe,KAAK;AAAA,MACjC,sBAAsBA,EAAY;AAAA,MAClC,YAAYA,EAAY;AAAA,IAC9B,CAAK,GACD8I,GAAoB9I,GAAa,KAAK,UAAU,WAAW,GAC3D,KAAK,UAAU,eAAe;EAC/B;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AACAgJ,GAAgB,YAAY;AAAA,EAC1B,MAAM;AAAA,IACJpJ,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AChCA,SAASqJ,GAAoBjJ,GAAakJ,IAAM,IAAI;AAClD,EAAAA,EAAI,KAAKlJ,CAAW;AACpB,WAASL,IAAI,GAAGA,IAAIK,EAAY,oBAAoB,QAAQL;AAC1D,IAAAsJ,GAAoBjJ,EAAY,oBAAoBL,CAAC,GAAGuJ,CAAG;AAE7D,SAAOA;AACT;ACNA,SAASC,GAAaC,GAAQC,GAAQC,GAAO;AAC3C,QAAMC,IAAKH,KAAU,KAAK,KACpBI,IAAKJ,KAAU,IAAI,KACnBK,IAAKL,IAAS,KACdM,IAAKL,KAAU,KAAK,KACpBM,IAAKN,KAAU,IAAI,KACnBO,IAAKP,IAAS,KACdQ,IAAIN,KAAMG,IAAKH,KAAMD,GACrBQ,IAAIN,KAAMG,IAAKH,KAAMF,GACrBS,IAAIN,KAAMG,IAAKH,KAAMH;AAC3B,UAAQO,KAAK,OAAOC,KAAK,KAAKC;AAChC;ACTA,MAAMC,IAAY;AAClB,SAASC,GAAUC,GAAeC,GAAgB;AAChD,SAAID,MAAkBF,KAAaG,MAAmBH,IAC7CE,IAAgBC,IAAiBH,IAEnCb,GAAae,GAAeC,GAAgB,GAAG;AACxD;ACLA,MAAMC,KAAgB,IAAIC;AAC1B,SAASC,GAA4BtK,GAAauK,IAA0B,IAAO;AACjF,EAAAC,GAA2BxK,CAAW;AACtC,QAAMyK,IAAmBzK,EAAY,kBAC/B0K,IAAa1K,EAAY;AAC/B,EAAAA,EAAY;AACZ,aAAWuD,KAAKkH,GAAkB;AAChC,UAAME,IAAkBF,EAAiBlH,CAAC,GACpCqH,IAAOD,EAAgB,MACvBE,IAAQF,EAAgB;AAC9B,aAAShL,IAAI,GAAGA,IAAIkL,GAAOlL;AACzB,MAAAmL,GAA2BF,EAAKjL,CAAC,GAAG+K,GAAY,CAAC;AAEnD,IAAAC,EAAgB,QAAQ;AAAA,EACzB;AACD,MAAIJ;AACF,aAAS5K,IAAI,GAAGA,IAAIK,EAAY,oBAAoB,QAAQL;AAC1D,MAAA2K,GAA4BtK,EAAY,oBAAoBL,CAAC,GAAG4K,CAAuB;AAG7F;AACA,SAASC,GAA2BxK,GAAa;AAC/C,QAAME,IAAOF,EAAY;AACzB,MAAI+K;AACJ,MAAI/K,EAAY,mBAAmB;AACjC,UAAMgL,IAAoBhL,EAAY;AACtC,IAAAA,EAAY,eAAe;AAAA,MACzBE,EAAK;AAAA,MACL8K,EAAkB;AAAA,IACxB,GACIhL,EAAY,aAAaiK;AAAA,MACvB/J,EAAK;AAAA,MACL8K,EAAkB;AAAA,IACxB,GACID,IAAa7K,EAAK,aAAa8K,EAAkB;AAAA,EACrD;AACI,IAAAhL,EAAY,eAAe,SAASE,EAAK,cAAc,GACvDF,EAAY,aAAaE,EAAK,YAC9B6K,IAAa7K,EAAK;AAEpB,EAAA6K,IAAaA,IAAa,IAAI,IAAIA,IAAa,IAAI,IAAIA,GACvD/K,EAAY,aAAa+K,GACzB/K,EAAY,kBAAkBA,EAAY,eAAe+K,IAAa,MAAM,MAAM;AACpF;AACA,SAASD,GAA2BzK,GAAWqK,GAAYO,GAAa;AACtE,MAAIP,MAAerK,EAAU;AAC3B;AACF,EAAAA,EAAU,aAAaqK,GACvBrK,EAAU,YAAY;AACtB,QAAM6K,IAAiB7K,EAAU;AACjC,EAAAA,EAAU,qBAAoB;AAC9B,QAAM8K,IAAS9K,EAAU;AAiBzB,MAhBI8K,KAAU,CAACA,EAAO,qBACpBF,IAAcA,IAAc5K,EAAU,cACtCA,EAAU,uBAAuB;AAAA,IAC/B6K;AAAA,IACAC,EAAO;AAAA,EACb,GACQF,KACFG,EAA2B/K,GAAW8K,GAAQF,CAAW,MAG3DA,IAAc5K,EAAU,cACxBA,EAAU,uBAAuB,SAAS6K,CAAc,GACpDD,KACFG,EAA2B/K,GAAW+J,IAAea,CAAW,IAGhE,CAAC5K,EAAU,mBAAmB;AAChC,UAAMG,IAAWH,EAAU,UACrBI,IAASD,EAAS;AACxB,aAASb,IAAI,GAAGA,IAAIc,GAAQd;AAC1B,MAAAmL,GAA2BtK,EAASb,CAAC,GAAG+K,GAAYO,CAAW;AAEjE,UAAMjL,IAAcK,EAAU;AAC9B,IAAIA,EAAU,gBAAgB,CAACL,EAAY,sBACzCA,EAAY,iBAAiBK,CAAS;AAAA,EAEzC;AACH;AACA,SAAS+K,EAA2B/K,GAAW8K,GAAQF,GAAa;AAClE,MAAIA,IAAcI,IAAc;AAC9B,IAAAhL,EAAU,aAAa4J;AAAA,MACrB5J,EAAU;AAAA,MACV8K,EAAO;AAAA,IACb;AACI,QAAIG,IAAajL,EAAU,aAAa8K,EAAO;AAC/C,IAAAG,IAAaA,IAAa,IAAI,IAAIA,IAAa,IAAI,IAAIA,GACvDjL,EAAU,aAAaiL,GACvBjL,EAAU,kBAAkBA,EAAU,eAAeiL,IAAa,MAAM,MAAM;AAAA,EAC/E;AACD,EAAIL,IAAcM,OAChBlL,EAAU,iBAAiBA,EAAU,mBAAmB,YAAY8K,EAAO,iBAAiB9K,EAAU,iBAEpG4K,IAAcO,OAChBnL,EAAU,sBAAsBA,EAAU,qBAAqB8K,EAAO,sBAExE9K,EAAU,eAAe;AAC3B;ACrGA,SAASoL,GAAoBzL,GAAaC,GAAa;AACrD,QAAM,EAAE,MAAA2K,GAAM,OAAAC,MAAU7K,EAAY;AACpC,MAAI0L,IAAkB;AACtB,WAAS/L,IAAI,GAAGA,IAAIkL,GAAOlL,KAAK;AAC9B,UAAMU,IAAYuK,EAAKjL,CAAC;AAIxB,QADA+L,IADazL,EADMI,EACiB,YAAY,EACzB,mBAAmBA,CAAS,GAC/CqL;AACF;AAAA,EAEH;AACD,SAAA1L,EAAY,qBAAqB0L,GAC1BA;AACT;ACNA,MAAMC,KAAa,IAAI5M;AACvB,MAAM6M,GAAkB;AAAA,EACtB,YAAY3M,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA,EACD,OAAO,EAAE,WAAAoB,GAAW,WAAAwL,KAAa;AAC/B,IAAAxL,EAAU,gBAAgB;AAC1B,UAAM8K,IAAS9K,EAAU,QACnB2K,IAAoB3K,EAAU,YAAY;AAChD,IAAAA,EAAU,SAAS,MACnBA,EAAU,YAAY,oBAAoB;AAC1C,UAAMpB,IAAW,KAAK,WAChB6M,IAAe7C,GAAoB5I,EAAU,aAAa,CAAE,CAAA;AAClE,QAAI0L,IAAyBJ;AAC7B,IAAIE,MACFE,IAAyBA,EAAuB,SAAS1L,EAAU,YAAY,cAAc,GAC7FA,EAAU,YAAY,eAAe,SAASwL,CAAS;AAEzD,UAAM5L,IAAchB,EAAS;AAC7B,aAASU,IAAI,GAAGA,IAAImM,EAAa,QAAQnM,KAAK;AAC5C,YAAMK,IAAc8L,EAAanM,CAAC;AAClC,MAAAK,EAAY,YAAW,GACvBA,EAAY,eAAe,cAAcC,GACpCD,EAAY,sBACfyL,GAAoBzL,GAAaC,CAAW,GAE9CqK,GAA4BtK,CAAW,GACnCA,EAAY,sBACdA,EAAY,qBAAqB,IACjCD,GAAkBC,GAAaC,CAAW,KAE1C+L,GAAkBhM,CAAW,GAE/BA,EAAY,4BAA4B,QAAQ,GAChDf,EAAS,YAAY,MAAM,OAAOe,EAAY,cAAc;AAAA,IAC7D;AACD,IAAAf,EAAS,eAAe,MAAM;AAAA,MAC5B,sBAAsB4M,IAAYxL,EAAU,YAAY,iBAAiBA,EAAU,YAAY;AAAA,MAC/F,YAAYA,EAAU,YAAY;AAAA,IACxC,CAAK,GACDyI,GAAoBzI,EAAU,aAAaJ,CAAW,GAClDA,EAAY,gBACdA,EAAY,aAAa,aAEvB4L,KACFxL,EAAU,YAAY,eAAe,SAAS0L,CAAsB,GAEtE1L,EAAU,SAAS8K,GACnB9K,EAAU,YAAY,oBAAoB2K;AAAA,EAC3C;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AAEAY,GAAkB,YAAY;AAAA,EAC5B,MAAM;AAAA,IACJhM,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AACA,SAASoM,GAAkBhM,GAAa;AACtC,QAAM,EAAE,MAAA4K,GAAM,OAAAC,MAAU7K,EAAY;AACpC,WAASL,IAAI,GAAGA,IAAIkL,GAAOlL,KAAK;AAC9B,UAAMU,IAAYuK,EAAKjL,CAAC;AACxB,IAAIU,EAAU,iBACZL,EAAY,iBAAiBK,CAAS;AAAA,EAEzC;AACH;AC3EA,MAAM4L,GAAW;AAAA,EACf,YAAYhN,GAAU;AACpB,SAAK,iBAAiC,uBAAO,OAAO,IAAI,GACxD,KAAK,YAAYA;AAAA,EAClB;AAAA,EACD,cAAcP,GAAQwN,GAAiB;AACrC,UAAMC,IAAY,KAAK,cAAczN,CAAM;AAC3C,IAAIA,EAAO,oBACT,KAAK,uBAAuBA,GAAQyN,CAAS,GAC/C,KAAK,UAAU,YAAY,MAAM,WAAWA,CAAS;AAAA,EACtD;AAAA,EACD,iBAAiBzN,GAAQ;AACvB,UAAMyN,IAAY,KAAK,eAAezN,EAAO,GAAG;AAChD,IAAIA,EAAO,oBACT,KAAK,uBAAuBA,GAAQyN,CAAS,GAC/CA,EAAU,QAAQ,cAAcA,CAAS;AAAA,EAC1C;AAAA,EACD,mBAAmBzN,GAAQ;AACzB,UAAM4H,IAAU5H,EAAO,UACjByN,IAAY,KAAK,cAAczN,CAAM;AAC3C,WAAIyN,EAAU,QAAQ,YAAY7F,EAAQ,UACjC,CAAC6F,EAAU,QAAQ,sBAAsBA,GAAW7F,CAAO,IAE7D;AAAA,EACR;AAAA,EACD,kBAAkB5H,GAAQ;AACxB,UAAM0N,IAAkB,KAAK,eAAe1N,EAAO,GAAG;AACtD,IAAAiD,EAAQ,OAAOyK,CAAe,GAC9B,KAAK,eAAe1N,EAAO,GAAG,IAAI;AAAA,EACnC;AAAA,EACD,uBAAuBA,GAAQ0N,GAAiB;AAC9C,IAAA1N,EAAO,mBAAmB,IAC1B0N,EAAgB,SAAS1N,EAAO,QAChC0N,EAAgB,UAAU1N,EAAO;AAAA,EAClC;AAAA,EACD,cAAcA,GAAQ;AACpB,WAAO,KAAK,eAAeA,EAAO,GAAG,KAAK,KAAK,eAAeA,CAAM;AAAA,EACrE;AAAA,EACD,eAAeA,GAAQ;AACrB,UAAM0N,IAAkBzK,EAAQ,IAAI0K,EAAe;AACnD,WAAAD,EAAgB,aAAa1N,GAC7B0N,EAAgB,UAAU1N,EAAO,UACjC0N,EAAgB,SAAS1N,EAAO,QAChC0N,EAAgB,cAAc,KAAK,UAAU,eAAe1N,EAAO,cACnE,KAAK,eAAeA,EAAO,GAAG,IAAI0N,GAClC1N,EAAO,mBAAmB,IAC1BA,EAAO,GAAG,aAAa,MAAM;AAC3B,WAAK,kBAAkBA,CAAM;AAAA,IACnC,CAAK,GACM0N;AAAA,EACR;AAAA,EACD,UAAU;AACR,eAAWzM,KAAK,KAAK;AACnB,MAAAgC,EAAQ,OAAO,KAAK,eAAehC,CAAC,CAAC;AAEvC,SAAK,iBAAiB,MACtB,KAAK,YAAY;AAAA,EAClB;AACH;AAEAsM,GAAW,YAAY;AAAA,EACrB,MAAM;AAAA,IACJrM,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;ACpEA,MAAM0M,IAAoB,MAAMA,GAAkB;AAAA,EAChD,cAAc;AACZ,SAAK,oBAAoB,IACzB,KAAK,mBAAmB,IAAIC,EAAM,CAAC,GACnC,KAAK,QAAQ,KAAK,kBAClB,KAAK,QAAQ;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAKhP,GAAS;AACZ,IAAAA,IAAU,EAAE,GAAG+O,GAAkB,gBAAgB,GAAG/O,EAAO,GAC3D,KAAK,oBAAoBA,EAAQ,mBACjC,KAAK,QAAQA,EAAQ,cAAcA,EAAQ,mBAAmB,KAAK,kBACnE,KAAK,QAAQA,EAAQ,iBACrB,KAAK,iBAAiB,SAASA,EAAQ,eAAe;AAAA,EACvD;AAAA;AAAA,EAED,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,MAAMM,GAAO;AACf,SAAK,iBAAiB,SAASA,CAAK;AAAA,EACrC;AAAA;AAAA,EAED,IAAI,QAAQ;AACV,WAAO,KAAK,iBAAiB;AAAA,EAC9B;AAAA,EACD,IAAI,MAAMA,GAAO;AACf,SAAK,iBAAiB,SAASA,CAAK;AAAA,EACrC;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK,iBAAiB;EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAU;AAAA,EACT;AACH;AAEAyO,EAAkB,YAAY;AAAA,EAC5B,MAAM;AAAA,IACJ1M,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AAAA,EACN,UAAU;AACZ;AAEA0M,EAAkB,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,mBAAmB;AACrB;AACA,IAAIE,KAAmBF;ACvEvB,MAAMG,IAAqB,CAAA;AAC3BC,EAAW,OAAO9M,EAAc,WAAW,CAAC/B,MAAU;AACpD,MAAI,CAACA,EAAM;AACT,UAAM,IAAI,MAAM,+CAA+C;AAEjE,EAAA4O,EAAmB5O,EAAM,IAAI,IAAIA,EAAM;AACzC,GAAG,CAACA,MAAU;AACZ,SAAO4O,EAAmB5O,EAAM,IAAI;AACtC,CAAC;AACD,MAAM8O,GAAc;AAAA,EAClB,YAAY1N,GAAU;AACpB,SAAK,cAAc,IACnB,KAAK,cAA8B,uBAAO,OAAO,IAAI,GACrD,KAAK,YAAYA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa2N,GAAYC,GAAW1N,GAAgB;AAClD,QAAI,KAAK,qBAAqB0N,GAAW;AACvC,MAAI,KAAK,eACP,KAAK,gBAAgB,KAAKD,CAAU;AACtC;AAAA,IACD;AACD,SAAK,mBAAmBC,GACpB,KAAK,eACP,KAAK,sBAAsB1N,CAAc,GAE3C,KAAK,cAAc,CAAC,CAACsN,EAAmBI,CAAS,GAC7C,KAAK,gBACP,KAAK,wBAAwB1N,CAAc,GAC3C,KAAK,gBAAgB,KAAKyN,CAAU;AAAA,EAEvC;AAAA,EACD,wBAAwBzN,GAAgB;AACtC,SAAK,UAAU,YAAY,MAAM,MAAMA,CAAc;AACrD,UAAM0N,IAAY,KAAK;AACvB,QAAI,CAACJ,EAAmBI,CAAS,GAAG;AAClC,MAAA5J,EAAK,gCAAgC4J,CAAS,mEAAmE;AACjH;AAAA,IACD;AACD,IAAK,KAAK,YAAYA,CAAS,MAC7B,KAAK,YAAYA,CAAS,IAAI,IAAI7L,EAAa;AAAA,MAC7C,SAAS,CAAC,IAAIyL,EAAmBI,CAAS,EAAC,CAAE;AAAA,IACrD,CAAO;AAEH,UAAMrL,IAAc;AAAA,MAClB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,aAAa,CAAE;AAAA,MACf,cAAc,KAAK,YAAYqL,CAAS;AAAA,MACxC,WAAW;AAAA,IACjB;AACI,SAAK,kBAAkBrL,EAAY,aACnCrC,EAAe,IAAIqC,CAAW;AAAA,EAC/B;AAAA,EACD,sBAAsBrC,GAAgB;AACpC,SAAK,kBAAkB,MACvB,KAAK,UAAU,YAAY,MAAM,MAAMA,CAAc,GACrDA,EAAe,IAAI;AAAA,MACjB,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,WAAW;AAAA,IACjB,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa;AACX,SAAK,cAAc;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,SAASA,GAAgB;AACvB,IAAI,KAAK,eACP,KAAK,sBAAsBA,CAAc;AAAA,EAE5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,UAAU;AACR,SAAK,YAAY,MACjB,KAAK,kBAAkB;AACvB,eAAWQ,KAAK,KAAK;AACnB,WAAK,YAAYA,CAAC,EAAE,QAAO;AAE7B,SAAK,cAAc;AAAA,EACpB;AACH;AAEAgN,GAAc,YAAY;AAAA,EACxB,MAAM;AAAA,IACJ/M,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AC7GA,MAAMkN,IAAa;AAAA,EACjB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,MAAM;AACR,GACMC,IAAiB,MAAMA,GAAe;AAAA;AAAA,EAE1C,YAAY9N,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA,EACD,kBAAkB1B,GAASyP,IAAW,IAAI;AACxC,WAAIzP,aAAmB8M,KAAa9M,aAAmB2D,IAC9C;AAAA,MACL,QAAQ3D;AAAA,MACR,GAAGyP;AAAA,IACX,IAEW;AAAA,MACL,GAAGA;AAAA,MACH,GAAGzP;AAAA,IACT;AAAA,EACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,MAAMA,GAAS;AACnB,UAAM0P,IAAQ,IAAI;AAClB,WAAAA,EAAM,MAAM,MAAM,KAAK,OAAO1P,CAAO,GAC9B0P;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,OAAO1P,GAAS;AACpB,IAAAA,IAAU,KAAK;AAAA,MACbA;AAAA,MACAwP,GAAe;AAAA,IACrB;AACI,UAAM,EAAE,QAAAG,GAAQ,SAAAC,EAAS,IAAG5P,GACtB8I,IAAS,KAAK,OAAO9I,CAAO;AAClC,QAAI8I,EAAO,WAAW;AACpB,aAAO,IAAI,QAAQ,CAAC+G,GAASC,MAAW;AACtC,QAAAhH,EAAO,OAAO,CAACiH,MAAS;AACtB,cAAI,CAACA,GAAM;AACT,YAAAD,EAAO,IAAI,MAAM,wBAAwB,CAAC;AAC1C;AAAA,UACD;AACD,gBAAME,IAAS,IAAI;AACnB,UAAAA,EAAO,SAAS,MAAMH,EAAQG,EAAO,MAAM,GAC3CA,EAAO,UAAUF,GACjBE,EAAO,cAAcD,CAAI;AAAA,QAC1B,GAAER,EAAWI,CAAM,GAAGC,CAAO;AAAA,MACtC,CAAO;AAEH,QAAI9G,EAAO,cAAc;AACvB,aAAOA,EAAO,UAAUyG,EAAWI,CAAM,GAAGC,CAAO;AAErD,QAAI9G,EAAO,kBAAkB,QAAQ;AACnC,YAAMiH,IAAO,MAAMjH,EAAO,cAAc,EAAE,MAAMyG,EAAWI,CAAM,GAAG,SAAAC,EAAO,CAAE;AAC7E,aAAO,IAAI,QAAQ,CAACC,GAASC,MAAW;AACtC,cAAME,IAAS,IAAI;AACnB,QAAAA,EAAO,SAAS,MAAMH,EAAQG,EAAO,MAAM,GAC3CA,EAAO,UAAUF,GACjBE,EAAO,cAAcD,CAAI;AAAA,MACjC,CAAO;AAAA,IACF;AACD,UAAM,IAAI,MAAM,yGAAyG;AAAA,EAC1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO/P,GAAS;AACd,IAAAA,IAAU,KAAK,kBAAkBA,CAAO;AACxC,UAAMkK,IAASlK,EAAQ,QACjB0B,IAAW,KAAK;AACtB,QAAIwI,aAAkBvG;AACpB,aAAOjC,EAAS,QAAQ,eAAewI,CAAM;AAE/C,UAAMnB,IAAUrH,EAAS,iBAAiB,gBAAgB1B,CAAO,GAC3D8I,IAASpH,EAAS,QAAQ,eAAeqH,CAAO;AACtD,WAAAA,EAAQ,QAAO,GACRD;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO9I,GAAS;AACd,IAAAA,IAAU,KAAK,kBAAkBA,CAAO;AACxC,UAAMkK,IAASlK,EAAQ,QACjB0B,IAAW,KAAK,WAChBqH,IAAUmB,aAAkBvG,IAAUuG,IAASxI,EAAS,iBAAiB,gBAAgB1B,CAAO,GAChGiQ,IAAYvO,EAAS,QAAQ,UAAUqH,CAAO;AACpD,WAAImB,aAAkB4C,KACpB/D,EAAQ,QAAO,GAEVkH;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQjQ,GAAS;AAEf,WADAA,IAAU,KAAK,kBAAkBA,CAAO,GACpCA,EAAQ,kBAAkB2D,IACrB3D,EAAQ,SACV,KAAK,UAAU,iBAAiB,gBAAgBA,CAAO;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,SAASA,GAAS;AAChB,IAAAA,IAAU,KAAK,kBAAkBA,CAAO;AACxC,UAAM8I,IAAS,KAAK,OAAO9I,CAAO,GAC5BkQ,IAAO,SAAS,cAAc,GAAG;AACvC,IAAAA,EAAK,WAAWlQ,EAAQ,YAAY,aACpCkQ,EAAK,OAAOpH,EAAO,UAAU,WAAW,GACxC,SAAS,KAAK,YAAYoH,CAAI,GAC9BA,EAAK,MAAK,GACV,SAAS,KAAK,YAAYA,CAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAIlQ,GAAS;AACX,UAAMwI,IAAQxI,EAAQ,SAAS;AAC/B,IAAAA,IAAU,KAAK,kBAAkBA,CAAO;AACxC,UAAM8I,IAAS,KAAK,OAAO9I,CAAO,GAC5BmQ,IAASrH,EAAO;AACtB,YAAQ,IAAI,kBAAkBA,EAAO,KAAK,MAAMA,EAAO,MAAM,IAAI;AACjE,UAAMsH,IAAQ;AAAA,MACZ;AAAA,MACA,YAAY5H,CAAK;AAAA,MACjB,mBAAmB2H,CAAM;AAAA,MACzB;AAAA,IACN,EAAM,KAAK,GAAG;AACV,YAAQ,IAAI,OAAOC,CAAK;AAAA,EACzB;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AAEAZ,EAAe,YAAY;AAAA,EACzB,MAAM;AAAA,IACJnN,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AAEAmN,EAAe,sBAAsB;AAAA;AAAA,EAEnC,QAAQ;AAAA;AAAA,EAER,SAAS;AACX;AACA,IAAIa,KAAgBb;ACzKpB,MAAMc,WAAsB3M,EAAQ;AAAA,EAClC,OAAO,OAAO3D,GAAS;AACrB,WAAO,IAAI2D,EAAQ;AAAA,MACjB,QAAQ,IAAI6F,EAAcxJ,CAAO;AAAA,IACvC,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAOwI,GAAOC,GAAQkB,GAAY;AAChC,gBAAK,OAAO,OAAOnB,GAAOC,GAAQkB,CAAU,GACrC;AAAA,EACR;AACH;ACXA,MAAM4G,KAAW,IAAIvG,KACf1G,KAAa,IAAIC,KACjBiN,KAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAC3B,MAAMC,GAAsB;AAAA,EAC1B,YAAY/O,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,gBAAgB1B,GAAS;;AACvB,IAAIA,aAAmB8M,MACrB9M,IAAU;AAAA,MACR,QAAQA;AAAA,MACR,OAAO;AAAA,MACP,sBAAsB,CAAE;AAAA,MACxB,YAAY;AAAA,IACpB;AAEI,UAAM2J,IAAa3J,EAAQ,cAAc,KAAK,UAAU,YAClD0Q,IAAY1Q,EAAQ,aAAa,KAAK,UAAU,KAAK,WACrD8C,IAAY9C,EAAQ;AAC1B,QAAIoK,IAAapK,EAAQ;AACzB,IAAIoK,IAEFA,IADoB,MAAM,QAAQA,CAAU,KAAKA,EAAW,WAAW,IAC5CA,IAAa4E,EAAM,OAAO,SAAS5E,CAAU,EAAE,YAE1EA,IAAaoG;AAEf,UAAMG,MAAS3L,IAAAhF,EAAQ,UAAR,gBAAAgF,EAAe,OAAOuL,QAAaK,GAAe9N,GAAWQ,EAAU,EAAE;AACxF,IAAAqN,EAAO,QAAQ,KAAK,IAAIA,EAAO,OAAO,IAAIhH,CAAU,IAAI,GACxDgH,EAAO,SAAS,KAAK,IAAIA,EAAO,QAAQ,IAAIhH,CAAU,IAAI;AAC1D,UAAMO,IAASoG,GAAc,OAAO;AAAA,MAClC,GAAGtQ,EAAQ;AAAA,MACX,OAAO2Q,EAAO;AAAA,MACd,QAAQA,EAAO;AAAA,MACf,YAAAhH;AAAA,MACA,WAAA+G;AAAA,IACN,CAAK,GACKpC,IAAY9M,EAAO,OAAO,UAAU,CAACmP,EAAO,GAAG,CAACA,EAAO,CAAC;AAC9D,gBAAK,UAAU,OAAO;AAAA,MACpB,WAAA7N;AAAA,MACA,WAAAwL;AAAA,MACA,QAAApE;AAAA,MACA,YAAAE;AAAA,IACN,CAAK,GACMF;AAAA,EACR;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AAEAuG,GAAsB,YAAY;AAAA,EAChC,MAAM;AAAA,IACJpO,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;ACpEA,MAAMwO,GAAoB;AAAA,EACxB,YAAYnP,GAAU;AACpB,SAAK,cAAc,GACnB,KAAK,0BAA0B,IAC/B,KAAK,gBAAgB,IACrB,KAAK,kBAAkB,IACvB,KAAK,iBAAiB,IACtB,KAAK,oBAAoB,IACzB,KAAK,YAAYA;AAAA,EAClB;AAAA,EACD,QAAQ;AACN,SAAK,cAAc;AACnB,aAASU,IAAI,GAAGA,IAAI,KAAK,gBAAgB,QAAQA;AAC/C,WAAK,cAAc,KAAK,KAAK,gBAAgBA,CAAC,CAAC;AAEjD,aAASA,IAAI,GAAGA,IAAI,KAAK,kBAAkB,QAAQA;AACjD,WAAK,eAAe,KAAK,KAAK,kBAAkBA,CAAC,CAAC;AAEpD,SAAK,gBAAgB,SAAS,GAC9B,KAAK,kBAAkB,SAAS;AAAA,EACjC;AAAA,EACD,MAAMpC,GAAS;AACb,SAAK,MAAK,GACV,KAAK,KAAKA,CAAO;AAAA,EAClB;AAAA,EACD,KAAK;AAAA,IACH,MAAAgL;AAAA,IACA,kBAAA8F;AAAA,IACA,sBAAAC;AAAA,IACA,YAAAC;AAAA,IACA,QAAAhK;AAAA,EACJ,GAAK;AACD,UAAMmC,IAAe,KAAK,UAAU,aAAa,cAC3C8H,IAA2B,KAAK,cAAc,KAAK,wBAAwB,KAAK,cAAc,CAAC,IAAI;AAAA,MACvG,gBAAgB9H;AAAA,MAChB,sBAAsB,IAAI3H,EAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,QAAQ,IAAI0P,GAAO;AAAA,IACzB,GACUC,IAAoB;AAAA,MACxB,kBAAkBL,KAAoB,KAAK,UAAU,aAAa;AAAA,MAClE,YAAY9F,KAAQ7B,EAAa;AAAA,MACjC,sBAAsB4H,KAAwBE,EAAyB;AAAA,MACvE,YAAYD,KAAcC,EAAyB;AAAA,MACnD,QAAQjK,KAAUiK,EAAyB;AAAA,MAC3C,WAAW;AAAA,IACjB,GACU3K,IAAe,KAAK,cAAc,IAAG,KAAM,KAAK;AACtD,SAAK,gBAAgB,KAAKA,CAAY;AACtC,UAAM8K,IAAW9K,EAAa;AAC9B,IAAA8K,EAAS,oBAAoBD,EAAkB,kBAC/CC,EAAS,cAAcD,EAAkB,YACzCC,EAAS,sBAAsB,SAASD,EAAkB,oBAAoB,GAC9EC,EAAS,sBAAsB,MAAMD,EAAkB,OAAO,GAC9DC,EAAS,sBAAsB,MAAMD,EAAkB,OAAO,GAC9DE;AAAA,MACEF,EAAkB;AAAA,MAClBC,EAAS;AAAA,MACT;AAAA,IACN,GACI9K,EAAa,OAAM;AACnB,QAAIgL;AACJ,IAAI,KAAK,UAAU,YAAY,eAC7BA,IAAY,KAAK,UAAU,YAAY,aAAa,oBAAoBhL,GAAc,EAAK,KAE3FgL,IAAY,KAAK,eAAe,IAAG,KAAM,IAAIC,GAAS,GACtD,KAAK,kBAAkB,KAAKD,CAAS,GACrCA,EAAU,YAAYhL,GAAc,CAAC,IAEvC6K,EAAkB,YAAYG,GAC9B,KAAK,4BAA4BH;AAAA,EAClC;AAAA,EACD,KAAKnR,GAAS;AACZ,SAAK,KAAKA,CAAO,GACjB,KAAK,wBAAwB,KAAK,aAAa,IAAI,KAAK;AAAA,EACzD;AAAA,EACD,MAAM;AACJ,SAAK,4BAA4B,KAAK,wBAAwB,EAAE,KAAK,cAAc,CAAC,GAChF,KAAK,UAAU,SAASwR,GAAa,SACvC,KAAK,0BAA0B,UAAU,UAAU,CAAC,EAAE;EAEzD;AAAA,EACD,IAAI,YAAY;AACd,WAAO,KAAK,0BAA0B;AAAA,EACvC;AAAA,EACD,IAAI,eAAe;AACjB,WAAO,KAAK,0BAA0B,UAAU,UAAU,CAAC;AAAA,EAC5D;AAAA,EACD,kBAAkB;AAUhB,WATuB,IAAIjQ,GAAa;AAAA,MACtC,mBAAmB,EAAE,OAAO,IAAIC,EAAM,GAAI,MAAM,cAAe;AAAA,MAC/D,uBAAuB,EAAE,OAAO,IAAIA,EAAM,GAAI,MAAM,cAAe;AAAA;AAAA,MAEnE,kBAAkB,EAAE,OAAO,IAAI,aAAa,CAAC,GAAG,MAAM,YAAa;AAAA,MACnE,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,YAAa;AAAA,IACvD,GAAO;AAAA,MACD,UAAU;AAAA,IAChB,CAAK;AAAA,EAEF;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AAEAqP,GAAoB,YAAY;AAAA,EAC9B,MAAM;AAAA,IACJxO,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;ACtHA,IAAIoP,IAAY;AAChB,MAAMC,IAAU;AAChB,SAASC,GAASC,GAAM;AACtB,MAAI,CAAAH,GAGJ;AAAA,QAAII,EAAW,MAAM,eAAe,UAAU,YAAW,EAAG,QAAQ,QAAQ,IAAI,IAAI;AAClF,YAAMC,IAAO;AAAA,QACX,iCAAiCJ,CAAO,KAAKE,CAAI;AAAA;AAAA;AAAA,QAGjD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACN;AACI,iBAAW,QAAQ,IAAI,GAAGE,CAAI;AAAA,IAClC;AAAS,MAAI,WAAW,WACpB,WAAW,QAAQ,IAAI,UAAUJ,CAAO,MAAME,CAAI,2BAA2B;AAE/E,IAAAH,IAAY;AAAA;AACd;ACrBA,MAAMM,EAAY;AAAA,EAChB,YAAYrQ,GAAU;AACpB,SAAK,YAAYA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAK1B,GAAS;AACZ,QAAIA,EAAQ,OAAO;AACjB,UAAI2H,IAAO,KAAK,UAAU;AAC1B,MAAI,KAAK,UAAU,SAAS6J,GAAa,UACvC7J,KAAQ,IAAI,KAAK,UAAU,QAAQ,YAAY,KAEjDgK,GAAShK,CAAI;AAAA,IACd;AAAA,EACF;AACH;AAEAoK,EAAY,YAAY;AAAA,EACtB,MAAM;AAAA,IACJ1P,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AAAA,EACN,UAAU;AACZ;AAEA0P,EAAY,iBAAiB;AAAA;AAAA,EAE3B,OAAO;AACT;AClCA,MAAMC,IAAmB,MAAMA,GAAiB;AAAA;AAAA,EAE9C,YAAYtQ,GAAU;AACpB,SAAK,YAAYA,GACjB,KAAK,QAAQ,GACb,KAAK,aAAa;AAAA,EACnB;AAAA,EACD,KAAK1B,GAAS;AACZ,IAAAA,IAAU,EAAE,GAAGgS,GAAiB,gBAAgB,GAAGhS,EAAO,GAC1D,KAAK,gBAAgBA,EAAQ,wBAC7B,KAAK,UAAUA,EAAQ,mBACvB,KAAK,SAASA,EAAQ;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa;AACX,IAAK,KAAK,UAAU,sBAGpB,KAAK,SACA,KAAK,WAEV,KAAK,cACD,KAAK,aAAa,KAAK,kBACzB,KAAK,aAAa,GAClB,KAAK,IAAG;AAAA,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM;AACJ,UAAMiS,IAAkB,KAAK,UAAU,QAAQ;AAC/C,aAAS7P,IAAI,GAAGA,IAAI6P,EAAgB,QAAQ7P,KAAK;AAC/C,YAAM2G,IAAUkJ,EAAgB7P,CAAC;AACjC,MAAI2G,EAAQ,sBAAsBA,EAAQ,YAAYA,EAAQ,WAAW,MAAM,KAAK,QAAQA,EAAQ,WAAW,KAAK,YAClHA,EAAQ,WAAW,IACnBA,EAAQ,OAAM;AAAA,IAEjB;AAAA,EACF;AAAA,EACD,UAAU;AACR,SAAK,YAAY;AAAA,EAClB;AACH;AAEAiJ,EAAiB,YAAY;AAAA,EAC3B,MAAM;AAAA,IACJ3P,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AAEA2P,EAAiB,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,wBAAwB;AAC1B;AACA,IAAIE,KAAkBF;AACtB7C,EAAW,IAAI+C,EAAe;ACtE9B,MAAMC,IAAc,MAAMA,GAAY;AAAA;AAAA,EAEpC,IAAI,aAAa;AACf,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC5B;AAAA,EACD,IAAI,WAAW7R,GAAO;AACpB,SAAK,QAAQ,OAAO;AAAA,MAClB,KAAK,QAAQ,OAAO;AAAA,MACpB,KAAK,QAAQ,OAAO;AAAA,MACpBA;AAAA,IACN;AAAA,EACG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAKN,GAAS;AACZ,IAAAA,IAAU;AAAA,MACR,GAAGmS,GAAY;AAAA,MACf,GAAGnS;AAAA,IACT,GACQA,EAAQ,SACVoS,GAAYC,IAAQ,uDAAuD,GAC3ErS,EAAQ,SAASA,EAAQ,OAE3B,KAAK,SAAS,IAAIgK,EAAU,GAAG,GAAGhK,EAAQ,OAAOA,EAAQ,MAAM,GAC/D,KAAK,SAASA,EAAQ,UAAU6R,EAAW,IAAG,EAAG,gBACjD,KAAK,YAAY,CAAC,CAAC7R,EAAQ,WAC3B,KAAK,UAAU6I,GAAiB,KAAK,QAAQ7I,CAAO,GACpD,KAAK,eAAe,IAAI8J,EAAa;AAAA,MACnC,eAAe,CAAC,KAAK,OAAO;AAAA,MAC5B,OAAO,CAAC,CAAC9J,EAAQ;AAAA,MACjB,QAAQ;AAAA,IACd,CAAK,GACD,KAAK,QAAQ,OAAO,cAAcA,EAAQ,kBAAkB,GAC5D,KAAK,YAAY,CAAC,CAACA,EAAQ,WACvB,KAAK,gBACP,KAAK,OAAO,MAAM,QAAQ,GAAG,KAAK,QAAQ,KAAK,MAC/C,KAAK,OAAO,MAAM,SAAS,GAAG,KAAK,QAAQ,MAAM,OAEnD,KAAK,aAAaA,EAAQ;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAOsS,GAAoBC,GAAqB5I,GAAY;AAC1D,SAAK,QAAQ,OAAO,OAAO2I,GAAoBC,GAAqB5I,CAAU,GAC9E,KAAK,OAAO,QAAQ,KAAK,QAAQ,MAAM,OACvC,KAAK,OAAO,SAAS,KAAK,QAAQ,MAAM,QACpC,KAAK,gBACP,KAAK,OAAO,MAAM,QAAQ,GAAG2I,CAAkB,MAC/C,KAAK,OAAO,MAAM,SAAS,GAAGC,CAAmB;AAAA,EAEpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQvS,IAAU,IAAO;AAEvB,KADmB,OAAOA,KAAY,YAAYA,IAAU,CAAC,EAACA,KAAA,QAAAA,EAAS,gBACrD,KAAK,OAAO,cAC5B,KAAK,OAAO,WAAW,YAAY,KAAK,MAAM;AAAA,EAEjD;AACH;AAEAmS,EAAY,YAAY;AAAA,EACtB,MAAM;AAAA,IACJ9P,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AAAA,EACN,UAAU;AACZ;AAEA8P,EAAY,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAK3B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKP,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKR,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,WAAW;AACb;AACA,IAAIK,KAAaL;AC5FZ,MAACM,KAAgB;AAAA,EACpBxD;AAAA,EACA4B;AAAA,EACAkB;AAAA,EACAS;AAAA,EACAnE;AAAA,EACA6D;AAAA,EACAzB;AAAA,EACAJ;AACF,GACMqC,KAAoB;AAAA,EACxBtD;AAAA,EACA3N;AAAA,EACAiN;AAAA,EACAjD;AAAA,EACA7H;AAAA,EACAmB;AAAA,EACAL;AAAA,EACA4G;AACF;","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]}