{"version":3,"file":"CanvasPool-DnQQO9Ca.js","sources":["../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const { width, height } = canvasAndContext.canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n"],"names":["CanvasPoolClass","canvasOptions","pixelWidth","pixelHeight","canvas","DOMAdapter","context","minWidth","minHeight","resolution","nextPow2","key","canvasAndContext","width","height","CanvasPool"],"mappings":";AAIA,MAAMA,EAAgB;AAAA,EACpB,YAAYC,GAAe;AACzB,SAAK,cAA8B,uBAAO,OAAO,IAAI,GACrD,KAAK,gBAAgBA,KAAiB,IACtC,KAAK,mBAAmB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,wBAAwBC,GAAYC,GAAa;AAC/C,UAAMC,IAASC,EAAW,IAAK,EAAC,aAAY;AAC5C,IAAAD,EAAO,QAAQF,GACfE,EAAO,SAASD;AAChB,UAAMG,IAAUF,EAAO,WAAW,IAAI;AACtC,WAAO,EAAE,QAAAA,GAAQ,SAAAE;EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,2BAA2BC,GAAUC,GAAWC,IAAa,GAAG;AAC9D,IAAAF,IAAW,KAAK,KAAKA,IAAWE,IAAa,IAAI,GACjDD,IAAY,KAAK,KAAKA,IAAYC,IAAa,IAAI,GACnDF,IAAWG,EAASH,CAAQ,GAC5BC,IAAYE,EAASF,CAAS;AAC9B,UAAMG,KAAOJ,KAAY,OAAOC,KAAa;AAC7C,IAAK,KAAK,YAAYG,CAAG,MACvB,KAAK,YAAYA,CAAG,IAAI;AAE1B,QAAIC,IAAmB,KAAK,YAAYD,CAAG,EAAE,IAAG;AAChD,WAAKC,MACHA,IAAmB,KAAK,wBAAwBL,GAAUC,CAAS,IAE9DI;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,uBAAuBA,GAAkB;AACvC,UAAM,EAAE,OAAAC,GAAO,QAAAC,MAAWF,EAAiB,QACrCD,KAAOE,KAAS,OAAOC,KAAU;AACvC,SAAK,YAAYH,CAAG,EAAE,KAAKC,CAAgB;AAAA,EAC5C;AAAA,EACD,QAAQ;AACN,SAAK,cAAc;EACpB;AACH;AACK,MAACG,IAAa,IAAIf,EAAe;","x_google_ignoreList":[0]}